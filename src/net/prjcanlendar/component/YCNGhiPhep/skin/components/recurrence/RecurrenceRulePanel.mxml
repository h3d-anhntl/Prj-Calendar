<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
               xmlns:s="library://ns.adobe.com/flex/spark" 
               xmlns:mx="library://ns.adobe.com/flex/mx"
               xmlns:local="recurrence.*"
               title="@Resource(bundle='calendarsample', key='calendarsample.recurrence.title')"
               implements="net.prjcanlendar.component.YCNGhiPhep.skin.components.recurrence.IRecurrenceRuleEditor"               
               creationComplete="init()" xmlns:recurrence="components.recurrence.*" xmlns:recurrence1="net.prjcanlendar.component.YCNGhiPhep.skin.components.recurrence.*" >
  
  <fx:Script>
    <![CDATA[
      import net.fproject.calendar.recurrence.RRule;
      
      import mx.controls.Alert;
      import mx.core.IVisualElement;
      import mx.events.CloseEvent;
      import mx.formatters.DateFormatter;
      
      import spark.events.IndexChangeEvent;
      
      private var _rrule:RRule;      
      
      [Bindable]
      private var _date:Date; //dtStart
      
      private var ruleEditors:Vector.<IRecurrenceRuleEditor>;
      
      private function init():void {
        
        ruleEditors = new <IRecurrenceRuleEditor>[
          dailyRulePanel, weeklyRulePanel, monthlyRulePanel, yearlyRulePanel 
        ];
        
        untilDate.addEventListener("change", function (e:Event):void {
          moveRadio(3);
          dispatch();
          updateICalendarRule();
          
        });
        
        if (_date != null) {
          dtStartLabel.text = _dateFormatter.format(_date);        
          weeklyRulePanel.startTime = _date;
        }
        
        _textRulePanel = new TextRulePanel();
        _textRulePanel.percentWidth = 100;   
        
        _textRulePanel.editButton.addEventListener(MouseEvent.CLICK, showTextEditor);
        
        _textRulePanel.textEditor.addEventListener("OK", textEditorHandler);
        
        if (_rrule != null) {
          setRecurrenceRuleImpl();
        }
        
        removeButton.enabled = _rrule != null;
        
        addEventListener("ruleChanged", function(e:Event):void {
          updateICalendarRule();
        });               
        
        updateICalendarRule();
        
        addEventListener(CloseEvent.CLOSE, function (e:Event):void {
          if (e.target != cancelButton) {           
            cancelHandler();
          }
        });
        
        buildUI();
      }
      
      private function buildUI():void {
        
        var format:String = resourceManager.getString("calendarsample", "calendarsample.recurrence.ruleeditor.count", ["|$count|"]);        
        Util.buildUI(this, choice2, format, handlerChoice2);
        
        format = resourceManager.getString("calendarsample", "calendarsample.recurrence.ruleeditor.until", ["|$untilDate|"]);        
        Util.buildUI(this, choice3, format, handlerChoice3);
        
      }
      
      private function handlerChoice2(e:Event):void {
        moveRadio(2);
        dispatch();
      }  
      
      private function handlerChoice3(e:Event):void {
        moveRadio(3);
        dispatch();
      }
      
      public function set date(value:Date):void {
        
        _date = value;
        
        if (_dateFormatter == null) {
          _dateFormatter = new DateFormatter();
          _dateFormatter.formatString = resourceManager.getString("calendarsample", "calendarsample.recurrence.ruleeditor.startTime.format");
        }
        
        if(dtStartLabel) {         
          dtStartLabel.text = _dateFormatter.format(_date);        
          weeklyRulePanel.startTime = date;
        }        
      }
      
      public function get date():Date {
        return _date;
      }
      
      private var _dateFormatter:DateFormatter;
      
      public function get recurrenceRule():RRule {
        
        var rEditor:IRecurrenceRuleEditor = IRecurrenceRuleEditor(ruleEditors[nav.selectedIndex]);
        
        if (rEditor.isValid()) {
          var rrule:RRule = rEditor.recurrenceRule;
          
          switch(radioGroup.selectedValue) {
            
            case "radio2":
              var c:int = parseInt(count.text);
              if (c < 1) {
                c = 1;
              }              
              rrule.count = c;
              break
            
            case "radio3":
              rrule.until = untilDate.selectedDate;
              break;
            
            default:
              //forever
              
          }
        } else {
          return _textRulePanel.textEditor.recurrenceRule;
        }
        
        return rrule;
      }
      
      public function set recurrenceRule(value:RRule):void {
        _rrule = value;
        if (nav) {
          setRecurrenceRuleImpl();
          removeButton.enabled = value != null;
        }
      }
      
      public function setRecurrenceRuleImpl():void {
        
        var r:RRule = _rrule;
        
        if (r == null) {
          reset();
          return;
        }
        
        var rEditor:IRecurrenceRuleEditor;
        
        switch(r.freq) {
          
          case RRule.DAILY:
            nav.selectedIndex = 0;
            rEditor = ruleEditors[0];
            break;
          
          case RRule.WEEKLY:            
            nav.selectedIndex = 1;
            rEditor = ruleEditors[1];
            break;          
                             
          case RRule.MONTHLY:
            nav.selectedIndex = 2;
            rEditor = ruleEditors[2];
            break;
          
          case RRule.YEARLY:
            nav.selectedIndex = 3;
            rEditor =ruleEditors[3];
            break;             
        } 
        
        rEditor.recurrenceRule = r;
        _textRulePanel.textEditor.recurrenceRule = r;
        
        nav.enabled = rEditor.isValid();              
        
        if (r.count != 0) {
          
          radioGroup.selectedValue = "radio2";
          count.text = r.count.toString();
          
        } else if (r.until != null) {
          
          radioGroup.selectedValue = "radio3";        
          untilDate.selectedDate = r.until;   
        }
        
        updateICalendarRule();
      }
      
      private function dispatch():void {
        
        dispatchEvent(new Event("ruleChanged"));
        
        updateICalendarRule();        
      }
      
      public function reset():void {
        
        if (nav != null) {
          for each (var rEditor:IRecurrenceRuleEditor in ruleEditors) {
            rEditor.reset();
          }
          nav.selectedIndex = 0;  
          
          nav.enabled = true;         
          
          radioGroup.selectedValue = "radio1";
          untilDate.selectedDate = new Date();
          count.text = "1";
          
          _textRulePanel.textEditor.recurrenceRule = null;          
          
          updateICalendarRule();         
        }                                                                             
      }
      
      private function updateICalendarRule():void {
        _textRulePanel.ical.textFlow = _textRulePanel.textEditor.getRichTextFlow(recurrenceRule.toString());        
        _textRulePanel.textEditor.recurrenceRule = recurrenceRule;
      }           
      
      private function moveRadio(id:int):void {
        radioGroup.selectedValue = "radio"+id;
      }
      
      public function isValid():Boolean {
        return true;
      }
      
      private function showTextEditor(e:Event):void {
        _textRulePanel.textEditor.recurrenceRule = recurrenceRule;
        nav.enabled = false;
        _textRulePanel.textEditor.visible = true;
        _textRulePanel.iCalPane.visible = false;
        okButton.enabled = false;
      }
      
      private function textEditorHandler(e:Event):void {
        _textRulePanel.textEditor.visible = false;
        _textRulePanel.iCalPane.visible = true;
        recurrenceRule = _textRulePanel.textEditor.recurrenceRule;
        okButton.enabled = true;        
      }
      
      private function okHandler():void {         
        dispatchEvent(new CloseEvent(CloseEvent.CLOSE, false, false, Alert.OK));
      } 
      
      private function cancelHandler():void {         
        cancelButton.dispatchEvent(new CloseEvent(CloseEvent.CLOSE, true, false, Alert.CANCEL));
      } 
      
      public static const REMOVE:int = 1; 
      
      private function removeHandler():void {         
        removeButton.dispatchEvent(new CloseEvent(CloseEvent.CLOSE, true, false, REMOVE));
      }
      
      private var _textRulePanel:TextRulePanel;     
      
      private function changeExpertMode():void {
        
        var modeOn:Boolean = expertMode.selected;
        
        if (modeOn) {
          
          if (_textRulePanel.parent != this) {
            addElementAt(_textRulePanel, 1);
          }
          
        } else {
          
          if (_textRulePanel != null) {
            Group(_textRulePanel.parent).removeElement(_textRulePanel);
          }          
        }       
      }
                
      protected function nav_changeHandler(event:IndexChangeEvent):void
      {
        var vEditor:IVisualElement = ruleEditors[event.oldIndex] as IVisualElement;
        vEditor.visible = false;
        vEditor = ruleEditors[event.newIndex] as IVisualElement;
        vEditor.visible = true;
        dispatch();
      }

    ]]>
  </fx:Script>
  
  <fx:Declarations>
    <s:RadioButtonGroup id="radioGroup" change="dispatch()" />
  </fx:Declarations>
  
  <s:layout>
    <s:VerticalLayout paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="5" gap="0" />
  </s:layout>
  
  <mx:Spacer height="2"/>
     
  <s:Label text="@Resource(bundle='calendarsample', key='calendarsample.recurrence.ruleeditor.title.recurrencePattern')" 
            textAlign="left" width="100%" fontWeight="bold" fontSize="11"/>
  
  <mx:HRule width="100%"/>
  
  <mx:Spacer height="10" width="100%"/>
  
  <s:TabBar id="nav" change="nav_changeHandler(event)" selectedIndex="0">
    <s:ArrayList>
      <fx:Object label="@Resource(bundle='calendarsample', key='calendarsample.recurrence.tab.title.daily')" />
      <fx:Object label="@Resource(bundle='calendarsample', key='calendarsample.recurrence.tab.title.weekly')" />
      <fx:Object label="@Resource(bundle='calendarsample', key='calendarsample.recurrence.tab.title.monthly')" />
      <fx:Object label="@Resource(bundle='calendarsample', key='calendarsample.recurrence.tab.title.yearly')" />
    </s:ArrayList>
  </s:TabBar>
  
  <s:Group>       
    <recurrence1:DailyRulePanel id="dailyRulePanel"                              
                               visible="true" />    
      
    <recurrence1:WeeklyRulePanel id="weeklyRulePanel"                               
                                visible="false" />    
      
    <recurrence1:MonthlyRulePanel id="monthlyRulePanel"                                
                                 visible="false" />
      
    <recurrence1:YearlyRulePanel  id="yearlyRulePanel" 
                                visible="false" />
    
    <s:Rect width="100%" height="100%">
      <s:stroke>
        <s:SolidColorStroke color="0xCCCCCC" />
      </s:stroke>
    </s:Rect>
  </s:Group>
    
<!--  <mx:TabNavigator id="nav" creationPolicy="all" height="170" change="dispatch()" creationComplete="initSize()">
    
    
    
  </mx:TabNavigator>
-->  
  <mx:Spacer height="10" width="100%"/>
  
  <s:Label text="@Resource(bundle='calendarsample', key='calendarsample.recurrence.ruleeditor.title.recurrenceRange')" 
            textAlign="left" width="100%" fontWeight="bold" fontSize="11"/>
  
  <mx:HRule width="100%"/>
  
  <mx:Spacer height="10" width="100%"/>   
  
  <s:VGroup>
    
    <s:HGroup>
      <s:Label text="@Resource(bundle='calendarsample', key='calendarsample.recurrence.ruleeditor.label.start')" 
                fontWeight="bold" />
      <s:Label id="dtStartLabel" />
    </s:HGroup>
    
    <s:VGroup>
      
      <s:Label text="@Resource(bundle='calendarsample', key='calendarsample.recurrence.ruleeditor.label.end')" 
               fontWeight="bold" />
                
      <s:HGroup paddingLeft="30" verticalAlign="middle">
        <s:RadioButton id="radio1" value="radio1" selected="true" />
        <s:Label text="@Resource(bundle='calendarsample', key='calendarsample.recurrence.ruleeditor.end.never.label')" 
                 click="dispatch(); moveRadio(1)" />                  
      </s:HGroup>
      
      <s:HGroup paddingLeft="30" verticalAlign="bottom">
        <s:RadioButton id="radio2" value="radio2" />
        <s:HGroup id="choice2" gap="5" verticalAlign="middle">
          <s:TextInput id="count" width="37" text="1" change="dispatch(); moveRadio(2)" />  
        </s:HGroup>        
      </s:HGroup>
      
      <s:HGroup paddingLeft="30" verticalAlign="middle">
        <s:RadioButton id="radio3" value="radio3" />
        <s:HGroup id="choice3" gap="5" verticalAlign="middle">                   
          <mx:DateField id="untilDate"/>
        </s:HGroup>        
      </s:HGroup>      
      
    </s:VGroup>
  </s:VGroup>
  
  <mx:Spacer height="20" width="100%"/>
  
  <s:CheckBox id="expertMode" selected="false" 
               label="@Resource(bundle='calendarsample', key='calendarsample.recurrence.ruleeditor.expertMode')"
               change="changeExpertMode()" />
  
  <mx:Spacer height="20" width="100%"/>  
  
  <s:HGroup horizontalAlign="center" width="100%" verticalAlign="bottom"> 
    <s:Button id="okButton" 
              label="@Resource(bundle='calendarsample', key='calendarsample.dialog.button.ok')" 
              click="okHandler()"/>
    <s:Button id="cancelButton" 
              label="@Resource(bundle='calendarsample', key='calendarsample.dialog.button.cancel')" 
              click="cancelHandler()"/>
    <s:Button id="removeButton" 
              label="@Resource(bundle='calendarsample', key='calendarsample.properties.button.remove')" 
              click="removeHandler()"/>             
  </s:HGroup>
    
</s:TitleWindow>
