<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
          xmlns:s="library://ns.adobe.com/flex/spark" 
          xmlns:mx="library://ns.adobe.com/flex/mx"
          implements="net.prjcanlendar.component.YCNGhiPhep.skin.components.recurrence.IRecurrenceRuleEditor"
          paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"
          gap="10"
          creationComplete="init()">

  <fx:Script>
    <![CDATA[
      import net.fproject.calendar.recurrence.RRule;
      import net.fproject.calendar.recurrence.RWeekDay;
      
      import mx.collections.ArrayList;
      import mx.formatters.DateFormatter;
      
      private var _positionModel:Array;      
      private var _dayModel:Array;      
      private var _startModel:Array;
      
      private function init():void {
        //init models
        _positionModel = [];
        _positionModel.push({label:getString("first.label"),  value:1});
        _positionModel.push({label:getString("second.label"), value:2});
        _positionModel.push({label:getString("third.label"),  value:3});
        _positionModel.push({label:getString("fourth.label"), value:4});
        _positionModel.push({label:getString("fifth.label"), value:5});        
        _positionModel.push({label:getString("last.label"),   value:-1});
        
        position.dataProvider = new ArrayList(_positionModel);
        
        var date:Date = new Date();
        
        var df:DateFormatter = new DateFormatter();
        df.formatString = resourceManager.getString("calendarsample", "calendarsample.recurrence.ruleeditor.weekday.format");
        
        date.date -= date.day; //start on sunday
        
        _dayModel = [];
        for (var i:uint=0; i<7; i++) {          
          _dayModel.push({label:df.format(date), value:i});
          date.date++;
        }
        
        weekDay.dataProvider = new ArrayList(_dayModel);
        
        _startModel = [
          { label:getString("month.fromStart.label"), value:1 },
          { label:getString("month.fromEnd.label"), value:-1 }        
        ];  
        
        fromStart.dataProvider = new ArrayList(_startModel);
        
        buildUI();
        
      }
      
      private function buildUI():void {
        
        var format:String = resourceManager.getString("calendarsample", "calendarsample.recurrence.ruleeditor.monthly.interval", ["|$interval|"]);        
        Util.buildUI(this, intervalPanel, format, null);
        
        format = resourceManager.getString("calendarsample", "calendarsample.recurrence.ruleeditor.monthly.choice1",  ["|$monthDay|", "|$fromStart|"]);        
        Util.buildUI(this, choice1Panel, format, handlerChoice1);
        
        format = resourceManager.getString("calendarsample", "calendarsample.recurrence.ruleeditor.monthly.choice2", ["|$position|", "|$weekDay|"]);                       
        Util.buildUI(this, choice2Panel, format, handlerChoice2);        
      }
      
      private function handlerChoice1(e:Event):void {
        moveRadio(1);
        dispatch();
      }       
      
      private function handlerChoice2(e:Event):void {
        moveRadio(2);
        dispatch();
      }
      
      private function getString(key:String):String {
        return resourceManager.getString("calendarsample", "calendarsample.recurrence.ruleeditor."+key);
      }
      
      public function set recurrenceRule(value:RRule):void {
        var r:RRule = value;
        
        _valid = true;
        
        if (r.freq == RRule.MONTHLY) {
          
          if (r.byMonthDay.length == 1) {
            
            monthDay.text = Math.abs(r.byMonthDay[0]).toString();
            
            fromStart.selectedIndex = r.byMonthDay[0] > 0 ? 0 : 1;                        
            
            radioGroup.selectedValue = "radio1";
            
            
          } else if (r.byDay.length == 1) {
            
            var wd:RWeekDay = r.byDay[0] as RWeekDay;
            
            setPosition(wd.modifier);
            
            if (_valid) {            
              weekDay.selectedIndex = RWeekDay.WEEK_DAYS.indexOf(wd.weekDay);           
              radioGroup.selectedValue = "radio2";                      
            }  
            
          } else {
            
            _valid = false;
          }
          
          if (_valid) {
            _valid = Util.checkDefaults(value, ["freq", "byDay", "byMonthDay", "interval", "until", "count"]);
          }
          
          if (_valid) {
            interval.text = r.interval.toString();
          } else {
            reset();  
            _valid = false;
          }
          
        }
        
      }
      
      private function setPosition(value:int):void {
        
        switch(value) {
          case 1:
            position.selectedIndex = 0;
            break;
          case 2:
            position.selectedIndex = 1;
            break;
          case 3:
            position.selectedIndex = 2;
            break;
          case 4:
            position.selectedIndex = 3;
            break;
          case 5:
            position.selectedIndex = 4;
            break;            
          case -1:
            position.selectedIndex = 5;
            break; 
          default:
            _valid = false;
            
        }
      }
      
      public function get recurrenceRule():RRule {
        
        var r:RRule = new RRule("FREQ=MONTHLY");
        
        if (radioGroup.selectedValue == "radio1") {
          
          var d:int = parseInt(monthDay.text);
          r.byMonthDay = [d * fromStart.selectedItem.value];
          
        } else {
          
          r.byDay = [new RWeekDay(position.selectedItem.value, weekDay.selectedItem.value)];                      
        }        
        
        var inter:int = parseInt(interval.text);
        
        if (inter > 1) {
          r.interval = inter;
        }        
        
        return r; 
      }
      
      
      private function validateDay():void {
        var md:int = Util.validateInt(monthDay.text);
        
        if (md < 0) {
          md = -md;
        }
        
        if (md > 31) {
          md = 31;
        } else if (md == 0) {
          md = 1;
        }
        
        monthDay.text = md.toString();
        
        dispatch(); 
      }    
      
      private function validateInterval():void {
        var i:int = Util.validateInt(interval.text, true);
        interval.text = i.toString();
        
        dispatch();
      }        
      
      private function dispatch():void {
        dispatchEvent(new Event("ruleChanged", true));        
      }  
      
      private function moveRadio(id:int):void {
        radioGroup.selectedValue = "radio"+id;
      }
      
      public function reset():void {
        radioGroup.selectedValue = "radio1";
        interval.text = "1";
        monthDay.text = "1";
        fromStart.selectedIndex = 0;
        position.selectedIndex = 0;
        weekDay.selectedIndex = 0;
        
        _valid = true; 
      }
      
      private var _valid:Boolean = true;
      
      public function isValid():Boolean {
        return _valid;
      }      
      
      
    ]]>
  </fx:Script>
  
  
  <fx:Declarations>    
    <s:RadioButtonGroup id="radioGroup" change="dispatch()" />
  </fx:Declarations>
  
  <s:HGroup verticalAlign="middle">
    <s:RadioButton groupName="radioGroup" value="radio1" selected="true"/>
    <s:HGroup id="choice1Panel" gap="5" verticalAlign="middle">      
      <mx:TextInput id="monthDay" width="37" change="moveRadio(1);validateDay()" text="1"/>
      <s:DropDownList id="fromStart" requireSelection="true" selectedIndex="0" change="moveRadio(1);dispatch()" />   
    </s:HGroup>        
  </s:HGroup>
  
  <s:HGroup verticalAlign="middle">
    <s:RadioButton groupName="radioGroup" value="radio2" />
    <s:HGroup id="choice2Panel" gap="5" verticalAlign="middle">              
      <s:DropDownList id="position" requireSelection="true" selectedIndex="0" change="moveRadio(2);dispatch()"   />      
      <s:DropDownList id="weekDay" requireSelection="true" selectedIndex="0" change="moveRadio(2);dispatch()" />
    </s:HGroup>    
  </s:HGroup>
  
  <s:HGroup id="intervalPanel" gap="5" verticalAlign="bottom">      
    <s:TextInput id="interval" width="37" change="validateInterval()" text="1"/>    
  </s:HGroup>
    
</s:VGroup>
