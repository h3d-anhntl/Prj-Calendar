<?xml version="1.0" encoding="utf-8"?>

<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="init()">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ICollectionView;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.ItemClickEvent;
			import mx.managers.PopUpManager;
			
			import net.fproject.fproject_internal;
			import net.fproject.calendar.components.Calendar;
			import net.fproject.calendar.components.supportClasses.CalendarRenderItem;
			import net.fproject.calendar.recurrence.IRecurrenceInstance;
			import net.fproject.calendar.recurrence.RRule;
			import net.fproject.calendar.recurrence.RecurrenceDescriptor;
			import net.fproject.core.TimeUnit;
			import net.fproject.utils.GregorianCalendar;
			import net.prjcanlendar.component.YCNGhiPhep.skin.components.recurrence.RecurrenceRulePanel;
			
			private var _timeModel:Array;
			private var _col1:ArrayCollection;
			private var _col2:ArrayCollection;
			
			private var _startTime:Date;
			private var _endTime:Date;
			
			private function init():void {
				
				var minutes:int = 0;
				
				_timeModel = [];
				
				while (minutes <= 1440) {
					
					var h:int = minutes / 60;
					var m:int = minutes - h * 60;         
					
					_timeModel.push(minutes);
					
					minutes += 15;
				}
				
				_col1 = new ArrayCollection(_timeModel);
				startTimeCombo.dataProvider = _col1;
				
				_col2 = new ArrayCollection(_timeModel);
				_col2.filterFunction = endTimeComboFilterFunction;
				_col2.refresh();
				
				endTimeCombo.dataProvider = _col2;      
				
				_recurrencePanel = new RecurrenceRulePanel();        
				
				_recurrencePanel.addEventListener(CloseEvent.CLOSE, function(e:CloseEvent):void {
					closeRecurrencePanel();
					if (e.detail == Alert.OK) {
						applyRecurrence();  
					} else if (e.detail == Alert.CANCEL) {
						// rollback
						_recurrencePanel.recurrenceRule = _rrule;  
					} else if (e.detail == RecurrenceRulePanel.REMOVE) {
						showRemoveRecurrenceConfirmation();
					}
				});         
			}   
			
			private function endTimeComboFilterFunction(item:Object):Boolean {
				if (startDateChooser.selectedDate!= null && endDateChooser.selectedDate!= null && 
					startDateChooser.selectedDate.time  == endDateChooser.selectedDate.time) {
					return item > int(startTimeCombo.selectedItem); 
				} else {
					return true;
				}
			}
			
			private function refreshEndTimeCombo():void {
				ICollectionView(endTimeCombo.dataProvider).refresh();
			}
			
			[Bindable]
			private var _calendar:Calendar;
			
			/**
			 * @private
			 */
			public function set calendar(value:Calendar):void {
				_calendar = value;        
			}
			
			public function get calendar():Calendar {
				return _calendar;        
			}
			
			[Bindable]
			private var _calendars:Array;
			
			/**
			 * @private
			 */
			public function set calendars(value:Array):void {
				_calendars = value;
				calendar1Fill.color = _calendars[0].color
				calendar2Fill.color = _calendars[1].color
				calendarProRadio.value = _calendars[0].identifier;
				calendarPerRadio.value = _calendars[1].identifier;
			}
			
			/**
			 * The calendars list.
			 */  
			public function get calendars():Array {
				return _calendars;        
			}
			
			private var _calendarItem:CalendarRenderItem;
			
			/**
			 * @private
			 */
			public function set calendarItem(value:CalendarRenderItem):void {
				_calendarItem = value;  
				initEditors();
			}
			
			/**
			 * The calendar item to display and edit.
			 */  
			public function get calendarItem():CalendarRenderItem {
				return _calendarItem;  
			}
			
			/**
			 * The data provider item, extracted from the calendar item.
			 */   
			private var _item:Object;
			
			/**
			 * The start date that is beging edited.
			 */  
			private var _startDate:Date;
			
			/**
			 * The end date that is beging edited.
			 */
			private var _endDate:Date;
			
			
			private var _calendarRadioEnabled:Boolean = true; 
			
			
			private function initEditors():void {
				
				var enabled:Boolean =  _calendarItem != null;
				
				summaryTextInput.enabled = enabled;
				deleteButton.enabled = enabled;
				startDateChooser.enabled = enabled;
				endDateChooser.enabled = enabled;
				startTimeCombo.enabled = enabled;
				endTimeCombo.enabled = enabled;
				
				descriptionTextArea.enabled = enabled;        
				allDayEventCheckbox.enabled = enabled;
				calendarProRadio.enabled = enabled && _calendarRadioEnabled;
				calendarPerRadio.enabled = enabled && _calendarRadioEnabled;
				
				summaryLabel.enabled = enabled;
				startTimeLabel.enabled = enabled;
				endTimeLabel.enabled = enabled;
				descriptionLabel.enabled = enabled;
				calendarLabel.enabled = enabled;
				recurrenceButton.enabled = enabled && !calendar.recurrenceDescriptor.isExceptionEvent(_calendarItem.data);        
				
				_recurrencePanel.reset();
				
				_rrule = null;
				
				if (_calendarItem != null) {                             
					
					if (_calendarItem.data is IRecurrenceInstance) {
						//we are editing an occurrence of a recurring event.
						_item = IRecurrenceInstance(_calendarItem.data).item;
						_calendarItem = _calendar.itemToRenderItem(_item);
						
						startDateChooser.enabled = false;
						endDateChooser.enabled = false;
						
					} else {
						_item = _calendarItem.data;
					}
					
					_startDate = new Date(_calendarItem.startTime);
					_endDate = new Date(_calendarItem.endTime);
					_startDate.hours = 0;
					_startDate.minutes = 0;
					_endDate.hours = 0;        
					_endDate.minutes = 0;
					
					summaryTextInput.text = _calendarItem.label;
					descriptionTextArea.text = _calendarItem.data.description;
					
					validateHours(); //fills all day check box
					
					startDateChooser.selectedDate = _startDate;
					endDateChooser.selectedDate = _endDate;
					
					_startTime = new Date(_calendarItem.startTime.time);
					_endTime = new Date(_calendarItem.endTime.time);      
					
					startTimeCombo.selectedIndex = _col1.getItemIndex(_startTime.hours * 60 + _startTime.minutes);
					refreshEndTimeCombo();
					
					if (allDayEventCheckbox.selected) {
						endTimeCombo.selectedIndex = _col2.getItemIndex(60);
					} else {
						var v:int = _endTime.hours * 60 + _endTime.minutes;
						endTimeCombo.selectedIndex = _col2.getItemIndex(v == 0 ? 1440 : v);
					}             
					
					radioGroup.selectedValue = _calendarItem.calendar.identifier;
					
					var recDesc:RecurrenceDescriptor =  
						_calendar.recurrenceDescriptor as RecurrenceDescriptor;
					
					if (recDesc.isRecurringEvent(_item)) {                      
						
						var rrules:Vector.<RRule> = recDesc.getRecurrenceRules(_item);                       
						_recurrencePanel.date = _calendarItem.startTime;
						
						if (rrules != null && rrules.length == 1) {   
							_rrule = rrules[0];
							_recurrencePanel.recurrenceRule = _rrule;                                  
						}    
					} else {
						_recurrencePanel.date = _calendarItem.startTime;
						_recurrencePanel.recurrenceRule = null;            
					}      
					
				} else {
					summaryTextInput.text = null;
					startDateChooser.selectedDate = null;
					endDateChooser.selectedDate = null;
					descriptionTextArea.text = null;
					radioGroup.selectedValue = null;
					startTimeCombo.selectedIndex = 0;
					refreshEndTimeCombo();
					endTimeCombo.selectedIndex = 0;
				}
			}
			
			private var _rrule:RRule;
			
			private function updateTimeComboVisibility():void {
				startTimeCombo.visible = !allDayEventCheckbox.selected;        
				endTimeCombo.visible = !allDayEventCheckbox.selected;               
			}
			
			private var _state:Object;
			
			private function updateAllDay():void {
				
				var gCalendar:GregorianCalendar = _calendar.calendar;
				
				if (allDayEventCheckbox.selected) {
					
					_state = {
						item: _calendarItem,
						hourStart: _calendarItem.startTime.hours,
							minutesStart: _calendarItem.startTime.minutes,
							hourEnd: _calendarItem.endTime.hours,
							minutesEnd: _calendarItem.endTime.minutes
					}
					
					_startDate = gCalendar.fproject_internal::floor(_startDate, TimeUnit.DAY, 1);
					_endDate = gCalendar.fproject_internal::floor(_endDate, TimeUnit.DAY, 1); 
					
					
					startDateChooser.selectedDate = _startDate;
					endDateChooser.selectedDate = _endDate;                                       
					
				} else {
					
					if (_state != null && _calendarItem == _state.item) {                                                 
						
						startTimeCombo.selectedItem = _state.hourStart * 60 + _state.minutesStart;
						refreshEndTimeCombo();
						endTimeCombo.selectedItem =  _state.hourEnd * 60 + _state.minutesEnd;                            
						
						_startDate = gCalendar.fproject_internal::floor(_startDate, TimeUnit.DAY, 1);
						_endDate = new Date(_startDate.time);
						
						startDateChooser.selectedDate = _startDate;
						endDateChooser.selectedDate = _endDate;                              
						
					} else { //not a previous call
						_startDate = gCalendar.fproject_internal::floor(_startDate, TimeUnit.DAY, 1);
						_endDate = new Date(_startDate.time);
						
						startDateChooser.selectedDate = _startDate;
						endDateChooser.selectedDate = _endDate;  
						startTimeCombo.selectedItem = (_calendar.startTimeOfDay.hours + 1)* 60;
						refreshEndTimeCombo();
						endTimeCombo.selectedItem =  (_calendar.startTimeOfDay.hours + 3) * 60;            
					}                           
				}
				
				updateTimeComboVisibility();
				updateStartAndEndTime();
			}
			
			private function validateHours():void {
				
				if (_calendarItem.startTime.hours == 0 && _calendarItem.startTime.minutes == 0 &&
					_calendarItem.endTime.hours == 0 && _calendarItem.endTime.minutes == 0) {
					
					var calendar:GregorianCalendar = _calendar.calendar;          
					_endDate = calendar.dateAddByTimeUnit(_endDate, TimeUnit.DAY, -1, true);
					
					allDayEventCheckbox.selected = true;             
					
				} else {
					allDayEventCheckbox.selected = false;
				}
				updateTimeComboVisibility();
			}
			
			private function computeStartAndEndTime():void {
				
				_startDate = startDateChooser.selectedDate;
				_endDate = endDateChooser.selectedDate;             
				
				_startTime = new Date(_startDate.time);
				_endTime = new Date(_endDate.time);
				
				if (allDayEventCheckbox.selected) {               
					_endTime = _calendar.calendar.dateAddByTimeUnit(_endDate, TimeUnit.DAY, 1);
				} else {
					_startTime.hours = int(startTimeCombo.selectedItem) / 60;
					_startTime.minutes = int(startTimeCombo.selectedItem) - _startTime.hours * 60;
					
					var v:int = endTimeCombo.selectedItem as int;
					if (v == 1440) {
						_endTime = _calendar.calendar.dateAddByTimeUnit(_endTime, TimeUnit.DAY, 1, true);
					} else {
						_endTime.hours = v / 60;
						_endTime.minutes = v - _endTime.hours * 60;
					}
				} 
			}
			
			private function updateStartAndEndTime():void {
				
				validateRange();
				
				computeStartAndEndTime();    
				
				_item.startTime = _startTime.toString();
				updateCollection("startTime");
				
				_item.endTime = _endTime.toString();
				updateCollection("endTime");
			}          
			
			private function validateRange():void {
				
				computeStartAndEndTime();
				
				if (_startTime > _endTime) {
					_startDate = _calendar.calendar.fproject_internal::floor(_endTime, TimeUnit.DAY, 1);
					_endDate = _calendar.calendar.fproject_internal::floor(_startTime, TimeUnit.DAY, 1);
					
					startDateChooser.selectedDate = _startDate;
					endDateChooser.selectedDate = _endDate;     
					
					var minutesStart:int = _endTime.hours * 60 + _endTime.minutes;
					startTimeCombo.selectedItem = minutesStart;
					
					refreshEndTimeCombo();
					endTimeCombo.selectedItem = _startTime.hours * 60 + _startTime.minutes;
					
					
				}
			}
			
			private function startTimeCombo_changeHandler():void {
				
				var d:int = _calendarItem.endTime.hours * 60 + _calendarItem.endTime.minutes - 
					_calendarItem.startTime.hours * 60 - _calendarItem.startTime.minutes;
				
				refreshEndTimeCombo();
				var visible:Boolean = endTimeComboFilterFunction(endTimeCombo.selectedItem);
				if (!visible) {
					endTimeCombo.selectedItem = Math.min(1440, startTimeCombo.selectedItem + d);
				}
				updateStartAndEndTime();
			}
			
			private function updateSummary():void {
				_item.label = summaryTextInput.text;
				updateCollection("summary");
			}
			
			private function updateDescription():void {
				_item.description = descriptionTextArea.text;
				updateCollection("description");
			}               
			
			private function updateCalendar(event:ItemClickEvent):void {                
				_item.calendar = RadioButtonGroup(event.currentTarget).selectedValue;               
				updateCollection("calendar");
			}
			
			private function updateCollection(property:String=null):void {          
				ICollectionView(_calendar.dataProvider).itemUpdated(_item, property);          
			}  
			
			private var _recurrencePanel:net.prjcanlendar.component.YCNGhiPhep.skin.components.recurrence.RecurrenceRulePanel;
			
			private function showRecurrencePanel():void {
				
				PopUpManager.addPopUp(_recurrencePanel, DisplayObject(FlexGlobals.topLevelApplication), true);            
				PopUpManager.centerPopUp(_recurrencePanel);   
			} 
			
			private function applyRecurrence():void {
				
				_calendarItem.data.rrules = _recurrencePanel.recurrenceRule;
				_calendarItem.data.recurring = "true";
				calendar.dataProvider.itemUpdated(_calendarItem.data);
				
				
				_calendar.selectedItems = null;
				calendarItem = null;                      
			}
			
			private function showRemoveRecurrenceConfirmation():void {
				
				var text:String = resourceManager.getString("calendarsample", "calendarsample.properties.confirmation.recurrence.remove.label");
				var title:String = resourceManager.getString("calendarsample", "calendarsample.properties.confirmation.recurrence.remove.title");
				Alert.show(text, title, Alert.YES | Alert.NO, null, removeRecurrence, null, Alert.YES);
				
			}
			
			private function removeRecurrence(event:CloseEvent):void {
				
				if (event.detail == Alert.YES) {
					
					//apply        
					_calendarItem.data.recurring = "false";
					_calendarItem.data.rrules = "";
					calendar.dataProvider.itemUpdated(_calendarItem.data);
					
					//after the change, select the item that is now non recurring.
					var item:Object = _calendarItem.data;
					callLater(function():void {
						_calendar.validateNow();
						_calendar.selectedItem = item;
						calendarItem = _calendar.itemToRenderItem(item);
					});
					
					calendarItem = null;
				}
				
			}         
			
			private function closeRecurrencePanel():void {
				PopUpManager.removePopUp(_recurrencePanel);
			}
			
			
			public function set calendarRadioEnabled(value:Boolean):void {
				_calendarRadioEnabled = value;
				calendarPerRadio.enabled = _calendarItem != null && value;
				calendarProRadio.enabled = _calendarItem != null && value;
			}
			
			public function get calendarRadioEnabled():Boolean {
				return _calendarRadioEnabled;
			}
			
			private function timeLabelFunction(value:int):String {
				
				var h:int = value / 60;
				var m:int = value - h * 60;
				
				return timeFormatter.format(new Date(2000, 0, 1, h, m));               
			}      
			
			protected function radioGroup_changeHandler(event:Event):void
			{
				calendarItem.data.calendar = event.target.selectedValue.toString();
				calendar.dataProvider.itemUpdated(calendarItem.data);
			}
			
		]]>
	</fx:Script>    
	
	<fx:Declarations>
		<s:RadioButtonGroup id="radioGroup" change="radioGroup_changeHandler(event)" />
		<s:DateTimeFormatter id="timeFormatter" dateStyle="none" timeStyle="short" />
	</fx:Declarations>
	
	<s:Scroller width="100%" height="100%" >
		
		<s:VGroup gap="5" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10">         
			
			<mx:LinkButton id="addButton"  
						   label="@Resource(bundle='calendarsample', key='calendarsample.properties.NewEvent')" 
						   toolTip="@Resource(bundle='calendarsample', key='calendarsample.properties.tip.NewEvent')"
						   click="dispatchEvent(new Event('createEvent'))"
						   icon="@Embed(source='../../../../../../../resources/new_calendar_item.png')"
						   width="100%" height="22" textAlign="left"
						   mouseOver="if (addButton.enabled) addButton.setStyle('textDecoration','underline')"
						   mouseOut="addButton.setStyle('textDecoration','none')"
						   color="#0054FF"/>
			
			<mx:LinkButton id="deleteButton" enabled="false" 
						   label="@Resource(bundle='calendarsample', key='calendarsample.properties.DeleteEvent')" 
						   toolTip="@Resource(bundle='calendarsample', key='calendarsample.properties.tip.DeleteEvent')"
						   click="dispatchEvent(new Event('deleteEvent'))"
						   icon="@Embed(source='../../../../../../../resources/delete_calendar_item.png')"
						   width="100%" height="22" textAlign="left"
						   mouseOver="if (deleteButton.enabled) deleteButton.setStyle('textDecoration','underline')"
						   mouseOut="deleteButton.setStyle('textDecoration','none')"
						   color="#0054FF"/>
			
			<s:Group height="2" width="5" />
			
			<mx:LinkButton id="recurrenceButton" enabled="false" 
						   label="@Resource(bundle='calendarsample', key='calendarsample.properties.Recurrence')" 
						   toolTip="@Resource(bundle='calendarsample', key='calendarsample.properties.tip.Recurrence')"
						   click="showRecurrencePanel()"
						   icon="@Embed(source='../../../../../../../resources/recurrence.png')"
						   width="100%" height="22" textAlign="left"
						   mouseOver="if (recurrenceButton.enabled) recurrenceButton.setStyle('textDecoration','underline')"
						   mouseOut="recurrenceButton.setStyle('textDecoration','none')"
						   color="#0054FF"/>      
			
			<s:Spacer height="5" width="5" />
			
			<s:Label text="@Resource(bundle='calendarsample', key='calendarsample.title.Properties')" textAlign="left" width="100%" fontWeight="bold" fontSize="12"/>
			
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="0xcccccc" />
				</s:stroke>
			</s:Line>  
			
			<s:Spacer height="5" width="5" />
			
			<s:Label id="summaryLabel" text="@Resource(bundle='calendarsample', key='calendarsample.event.label.Summary')" 
					 fontWeight="bold" fontSize="11" textAlign="right" enabled="false"/>
			
			<s:TextInput id="summaryTextInput" width="100%" change="updateSummary()" enabled="false"/>
			
			<s:Spacer height="5" width="5" />
			
			<s:Label id="startTimeLabel" text="@Resource(bundle='calendarsample', key='calendarsample.event.label.StartTime')" 
					 fontWeight="bold" fontSize="11" textAlign="right" enabled="false"/>
			<s:HGroup>
				<mx:DateField id="startDateChooser" change="updateStartAndEndTime()"  enabled="false"/>    
				<s:DropDownList id="startTimeCombo" width="90" change="startTimeCombo_changeHandler()" enabled="false" labelFunction="timeLabelFunction" />        
			</s:HGroup>
			
			<s:Spacer height="5" width="5" />
			
			<s:Label id="endTimeLabel" text="@Resource(bundle='calendarsample', key='calendarsample.event.label.EndTime')" 
					 fontWeight="bold" fontSize="11" textAlign="right" enabled="false"/>
			<s:HGroup>
				<mx:DateField id="endDateChooser" change="updateStartAndEndTime()" enabled="false" />       
				<s:DropDownList id="endTimeCombo" width="90" change="updateStartAndEndTime()" enabled="false" labelFunction="{timeLabelFunction}"  />
			</s:HGroup>
			
			<s:Spacer height="5" width="5" />
			
			<s:CheckBox id="allDayEventCheckbox" label="@Resource(bundle='calendarsample', key='calendarsample.event.label.AllDay')" 
						fontWeight="bold" fontSize="11" enabled="false" click="updateAllDay()" />
			
			<s:Spacer height="5" width="5" />
			
			<s:Label id="descriptionLabel" text="@Resource(bundle='calendarsample', key='calendarsample.event.label.Description')" 
					 fontWeight="bold" fontSize="11" textAlign="right" enabled="false"/>
			
			<s:TextArea id="descriptionTextArea" width="100%" height="50" change="updateDescription()" enabled="false" />
			
			<s:Spacer height="5" width="5" />
			
			<s:Label id="calendarLabel" fontSize="11" text="@Resource(bundle='calendarsample', key='calendarsample.event.label.Calendar')" 
					 fontWeight="bold" textAlign="right" enabled="false"/>
			
			<s:HGroup verticalAlign="middle">    
				<s:Rect id="calendarColor1" width="20" height="20" >
					<s:stroke>
						<s:SolidColorStroke color="0xcccccc" />
					</s:stroke>
					<s:fill>
						<s:SolidColor id="calendar1Fill" />
					</s:fill>
				</s:Rect>    
				<s:RadioButton id="calendarProRadio" groupName="radioGroup" 
							   label="@Resource(bundle='calendarsample', key='calendarsample.calendar.Professional')"
							   value="0"
							   enabled="false"  />
			</s:HGroup>
			
			<s:HGroup verticalAlign="middle">
				<s:Rect id="calendarColor2" width="20" height="20" >
					<s:stroke>
						<s:SolidColorStroke color="0xcccccc" />
					</s:stroke>
					<s:fill>
						<s:SolidColor id="calendar2Fill" />
					</s:fill>
				</s:Rect>   
				<s:RadioButton id="calendarPerRadio" groupName="radioGroup" 
							   label="@Resource(bundle='calendarsample', key='calendarsample.calendar.Personal')" 
							   enabled="false" value="1"/>
			</s:HGroup> 
			
		</s:VGroup>
		
	</s:Scroller>
	
</s:Panel>
