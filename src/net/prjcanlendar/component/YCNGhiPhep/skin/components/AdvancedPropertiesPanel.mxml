<?xml version="1.0" encoding="utf-8"?>

<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  paddingTop="10" paddingLeft="5" paddingRight="5" paddingBottom="10"           
		  initialize="vgroup1_initializeHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import flash.globalization.DateTimeNameStyle;
			
			import mx.core.IDataRenderer;
			import mx.core.IInvalidating;
			import mx.core.IVisualElement;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.resources.IResourceManager;
			
			import spark.events.IndexChangeEvent;
			
			import net.fproject.calendar.components.Calendar;
			import net.fproject.calendar.components.CalendarDisplayMode;
			import net.fproject.calendar.components.CalendarItemEditKind;
			import net.fproject.calendar.components.CalendarRendererKind;
			import net.fproject.calendar.components.supportClasses.CalendarRenderItem;
			import net.fproject.calendar.events.CalendarEditingEvent;
			import net.fproject.calendar.layouts.CalendarGroupColumnsLayout;
			import net.fproject.calendar.layouts.CalendarGroupGridLayout;
			import net.fproject.calendar.layouts.supportClasses.CalendarGroupLayoutBase;
			import net.fproject.calendar.supportClasses.CalendarRenderData;
			import net.fproject.calendar.supportClasses.TimeOfDay;
			
			[Bindable]
			private var timeOfDayModel:Array;
			
			[Bindable]
			private var _calendar:Calendar;
			
			/**
			 * The edited <code>Calendar</code> instance.
			 */  
			public function get calendar():Calendar {
				return _calendar;
			}
			
			/**
			 * @private
			 */  
			public function set calendar(value:Calendar):void {
				if (_calendar != null) {
					_calendar.removeEventListener("renderDataChanged", calendar_renderDataChangedHander);
					_calendar.removeEventListener(CalendarEditingEvent.ITEM_EDIT_RESIZE, calendar_itemEditResizeHandler);          
				}
				
				if (value != null) {
					_calendar = value;
					currentState = _calendar.renderData.displayMode; 
					_calendar.addEventListener("renderDataChanged", calendar_renderDataChangedHander);
					_calendar.addEventListener(CalendarEditingEvent.ITEM_EDIT_RESIZE, calendar_itemEditResizeHandler);       
				}
			}               
			
			private function calendar_itemEditResizeHandler(event:CalendarEditingEvent):void
			{
				
				// if effective display mode is columns, let's have the default behavior.
				// if effective display mode is grid, let's customize to allow resizing of short and long events.
				if (horizontalOnly && calendar.renderData.displayMode == CalendarDisplayMode.GRID) {
					
					event.preventDefault();
					
					var calItem:CalendarRenderItem = calendar.itemToRenderItem(event.item);               
					
					var isShiftKey:Boolean = event.triggerEvent is MouseEvent && MouseEvent(event.triggerEvent).shiftKey;         
					
					// compute new start or end time depending on edit kind.
					if (calendar.editKind == CalendarItemEditKind.RESIZE_START) {
						calItem.startTime = calendar.roundDate(calItem.startTime, isShiftKey);
					} else { // Resize end
						calItem.endTime = calendar.roundDate(calItem.endTime, isShiftKey);
					}
					
					// ensure minimum duration of one hour. 
					calendar.ensureCalendarItemMinimumDuration(calItem, false, 60);           
				}
			}
			
			private function calendar_renderDataChangedHander(event:Event):void {
				currentState = calendar.renderData.displayMode; 
			}
			
			private function createTimeOfDayModel():Array {
				var d:Date = new Date(2011,0,1,0,0,0);        
				var res:Array = [];
				for (var h:int=0; h<=24; h++) {
					d.hours = h;          
					res[h] = hourFormatter.format(d);
				}
				return res;
			}
			
			private function displayModeDropDownList_changeHandler(event:IndexChangeEvent):void
			{
				switch (event.newIndex) {
					case 0: 
						calendar.displayMode = CalendarDisplayMode.AUTO;
						break;
					case 1: 
						calendar.displayMode = CalendarDisplayMode.COLUMNS;
						break;
					case 2: 
						calendar.displayMode = CalendarDisplayMode.GRID;
						break;
				}         
			}      
			
			private function minTimeOfDayList_initializeHandler(event:FlexEvent):void
			{        
				minTimeOfDayList.dataProvider = new ArrayList(timeOfDayModel);
			}
			
			private function maxTimeOfDayList_initializeHandler(event:FlexEvent):void
			{
				if (timeOfDayModel == null) {
					timeOfDayModel = createTimeOfDayModel();
				}
				maxTimeOfDayList.dataProvider = new ArrayList(timeOfDayModel);
			}
			
			private function minTimeOfDayList_changeHandler(event:IndexChangeEvent):void
			{
				var start:TimeOfDay = new TimeOfDay(event.newIndex);
				calendar.minTimeOfDay = start;
				calendar.validateProperties();          
				calendar.startTimeOfDay = calendar.minTimeOfDay; 
				calendar.endTimeOfDay = calendar.maxTimeOfDay
				minTimeOfDayList.selectedIndex = calendar.minTimeOfDay.hours;
				maxTimeOfDayList.selectedIndex = calendar.maxTimeOfDay.hours;
			}
			
			private function maxTimeOfDayList_changeHandler(event:IndexChangeEvent):void
			{
				var end:TimeOfDay = new TimeOfDay(event.newIndex);
				calendar.maxTimeOfDay = end;
				calendar.validateProperties();
				calendar.startTimeOfDay = calendar.minTimeOfDay; 
				calendar.endTimeOfDay = calendar.maxTimeOfDay          
				minTimeOfDayList.selectedIndex = calendar.minTimeOfDay.hours;
				maxTimeOfDayList.selectedIndex = calendar.maxTimeOfDay.hours;
				
			}
			
			private function useHorizontalRendererOnly(renderData:CalendarRenderData, item:Object):String {
				return CalendarRendererKind.HORIZONTAL;
			}
			
			private function useLabelRendererOnly(renderData:CalendarRenderData, item:Object):String {
				return CalendarRendererKind.LABEL;
			}
			
			private function useVerticalRendererOnly(renderData:CalendarRenderData, item:Object):String {
				return CalendarRendererKind.VERTICAL;
			}
			
			private function useVerticalBarRendererOnly(renderData:CalendarRenderData, item:Object):String {
				return CalendarRendererKind.VERTICAL_BAR;
			}
			
			private function useVerticalOrBarRenderer(renderData:CalendarRenderData, item:Object):String {         
				return calendar.isLongEvent(item) || renderData.columnWidth < 100 ? CalendarRendererKind.VERTICAL_BAR : CalendarRendererKind.VERTICAL;
			}
			
			private var labelOnly:Boolean = false;
			private var horizontalOnly:Boolean = false;      
			
			private function columnRendererTypeList_changeHandler(event:IndexChangeEvent):void
			{
				var func:Function;               
				
				switch (event.newIndex) {
					case 0:
						func = null;
						break;
					case 1:
						func = useVerticalRendererOnly;
						break;
					case 2:
						func = useVerticalBarRendererOnly;
						break;
					case 3:
						func = useVerticalOrBarRenderer;
						break;        
				}
				
				CalendarGroupLayoutBase(calendar.dataGroup.layout).itemToRendererKindFunction = func;       
			}
			
			private function columnPercentOverlapSlider_changeHandler(event:Event):void
			{
				CalendarGroupColumnsLayout(calendar.dataGroup.layout).percentOverlap = event.target.value;
			}
			
			private function horizontalGapSlider_changeHandler(event:Event):void
			{
				CalendarGroupLayoutBase(calendar.dataGroup.layout).horizontalGap = event.target.value;
			}
			
			private function barStackingCheckBox_changeHandler(event:Event):void
			{
				CalendarGroupColumnsLayout(calendar.dataGroup.layout).verticalBarStackingEnabled = event.target.selected;
			}
			
			private function firstDayOfWeekList_changeHandler(event:IndexChangeEvent):void
			{
				calendar.firstDayOfWeek = event.newIndex;
			}
			
			private function gridRendererTypeList_changeHandler(event:IndexChangeEvent):void
			{
				var func:Function;
				
				labelOnly = false;
				horizontalOnly = false;
				
				switch (event.newIndex) {
					case 0:
						func = null;
						break;
					case 1:
						func = useHorizontalRendererOnly;
						horizontalOnly = true;
						break;
					case 2:
						func = useLabelRendererOnly;
						labelOnly = true;
						break;                 
				}
				CalendarGroupLayoutBase(calendar.dataGroup.layout).itemToRendererKindFunction = func;
			}
			
			private function itemIndicatorsCheckBox_changeHandler(event:Event):void
			{
				calendar.setStyle("showItemIndicators", event.target.selected);
			}
			
			private function gridPercentOverlapSlider_changeHandler(event:Event):void
			{
				CalendarGroupLayoutBase(calendar.dataGroup.layout).percentOverlap = event.target.value;
			}
			
			private function verticalGapSlider_changeHandler(event:Event):void
			{
				CalendarGroupLayoutBase(calendar.dataGroup.layout).verticalGap = event.target.value;
			}
			
			protected function vgroup1_initializeHandler(event:FlexEvent):void
			{
				if (timeOfDayModel == null) {
					timeOfDayModel = createTimeOfDayModel();
				}
			}
			
			protected function gridMinTimeOfDayList_changeHandler(event:IndexChangeEvent):void
			{
				var end:TimeOfDay = new TimeOfDay(event.newIndex);
				calendar.gridMinTimeOfDay = end;
				calendar.validateNow();       
				gridMinTimeOfDayList.selectedIndex = calendar.gridMinTimeOfDay.hours;
				gridMaxTimeOfDayList.selectedIndex = calendar.gridMaxTimeOfDay.hours;
			}
			
			protected function gridMaxTimeOfDayList_changeHandler(event:IndexChangeEvent):void
			{
				var end:TimeOfDay = new TimeOfDay(event.newIndex);
				calendar.gridMaxTimeOfDay = end;
				calendar.validateNow();       
				gridMinTimeOfDayList.selectedIndex = calendar.gridMinTimeOfDay.hours;
				gridMaxTimeOfDayList.selectedIndex = calendar.gridMaxTimeOfDay.hours;
			}
			
			private var _helpTip:IVisualElement;
			
			private function showHelpTip(event:Event, id:String):void {
				
				var target:IVisualElement = event.currentTarget as IVisualElement;
				
				var create:Boolean = _helpTip == null;
				
				if (create) {          
					//_helpTip = helpTip.newInstance();
				}
				
				IDataRenderer(_helpTip).data = resourceManager.getString("calendarsample", 
					"calendarsample.advancedPropertiesPanel." + id + ".help");
				
				if (create) {
					
					var tipAsUIComponent:UIComponent = _helpTip as UIComponent;
					
					if (tipAsUIComponent) {
						tipAsUIComponent.owner = this;
						tipAsUIComponent.isPopUp = true;
					}
					
					systemManager.toolTipChildren.addChild(DisplayObject(_helpTip));
				}
				
				_helpTip.setLayoutBoundsSize(NaN, NaN);       
				IInvalidating(_helpTip).validateNow();
				
				var p:Point = new Point(target.getLayoutBoundsX() + target.getLayoutBoundsWidth(), 
					target.getLayoutBoundsY() - _helpTip.getPreferredBoundsHeight());
				p = target.parent.localToGlobal(p);        
				
				_helpTip.setLayoutBoundsPosition(p.x, p.y);
				
				_helpTip.visible = true;
			}
			
			private function hideHelpTip():void {
				_helpTip.visible = false; 
			}
			
			private function percentFormatFunction(value:Number):String {
				return resourceManager.getString("calendarsample", "calendarsample.advancedPropertiesPanel.percentValueLabel", [value]);
			}
			
			private function pixelsFormatFunction(value:Number):String {
				return resourceManager.getString("calendarsample", "calendarsample.advancedPropertiesPanel.pixelsValueLabel", [value]);
			}
			
			private function timeSlotFormatFunction(value:Number):String {
				if (value == 0) {
					return resourceManager.getString("calendarsample", "calendarsample.advancedPropertiesPanel.defaultTimeSlotValue");
				} else {
					return resourceManager.getString("calendarsample", "calendarsample.advancedPropertiesPanel.timeSlotValueLabel", [value]);
				}
			}
			
			private function get daysOfWeekLabels():ArrayList {
				
				var days:Vector.<String> = hourFormatter.getWeekdayNames(DateTimeNameStyle.FULL); 
				
				var res:Array = [];
				
				for (var i:int=0; i<days.length; i++) {          
					res.push(days[i]);
				}        
				return new ArrayList(res);
			}
			
			
			protected function firstDayOfWeekList_initializeHandler(event:FlexEvent):void
			{
				firstDayOfWeekList.dataProvider = daysOfWeekLabels;
				firstDayOfWeekList.selectedIndex = resourceManager.getInt('controls', 'firstDayOfWeek');
				
			}
			
			private var _timeSlotDuration:int = 0;
			
			private function timeSlotDurationFunction(rd:CalendarRenderData):int {
				return _timeSlotDuration;
			}
			
			protected function timeSlotDuration_changeHandler(event:Event):void
			{
				_timeSlotDuration = event.target.value;
				if (_timeSlotDuration == 0) {
					calendar.dataDescriptor.timeSlotDurationFunction = null;
				} else {
					calendar.dataDescriptor.timeSlotDurationFunction = timeSlotDurationFunction;
				}         
			}
			
			private var _hiddenWeekDaysCB:Vector.<CheckBox> = new Vector.<CheckBox>();
			private var _wwHiddenWeekDaysCB:Vector.<CheckBox> = new Vector.<CheckBox>();
			
			protected function hiddenWeekDaysGroup_initializeHandler(event:FlexEvent):void
			{
				var daysOfWeek:ArrayList = daysOfWeekLabels;                             
				
				for (var i:int=0; i<7; i++) {
					var cb:CheckBox = new CheckBox();
					cb.label = daysOfWeek.getItemAt(i).toString();
					cb.addEventListener(Event.CHANGE, hiddenWeekDaysCheckBox_changeHandler);
					if (calendar != null && calendar.hiddenWeekDays != null) {
						cb.selected = calendar.hiddenWeekDays.indexOf(i) != -1;
					}
					_hiddenWeekDaysCB.push(cb);
					hiddenWeekDaysGroup.addElement(cb);
				}
				
			}
			
			protected function workWeekHiddenWeekDaysGroup_initializeHandler(event:FlexEvent):void
			{
				var daysOfWeek:ArrayList = daysOfWeekLabels;                             
				
				for (var i:int=0; i<7; i++) {
					var cb:CheckBox = new CheckBox();
					cb.label = daysOfWeek.getItemAt(i).toString();
					cb.addEventListener(Event.CHANGE, wwHiddenWeekDaysCheckBox_changeHandler);
					if (calendar != null) {
						cb.selected = calendar.hiddenWorkWeekDays.indexOf(i) != -1;
					}
					_wwHiddenWeekDaysCB.push(cb);
					workWeekHiddenWeekDaysGroup.addElement(cb);
				}
				
			}
			
			private function hiddenWeekDaysCheckBox_changeHandler(event:Event):void {
				var hiddenWeekDays:Vector.<int> = new Vector.<int>();
				for (var i:int=0; i<7; i++) {
					if (_hiddenWeekDaysCB[i].selected) {
						hiddenWeekDays.push(i);
					}
				}
				if (calendar != null) {
					calendar.hiddenWeekDays = hiddenWeekDays;
				}
			}
			
			private function wwHiddenWeekDaysCheckBox_changeHandler(event:Event):void {
				var hiddenWeekDays:Vector.<int> = new Vector.<int>();
				for (var i:int=0; i<7; i++) {
					if (_wwHiddenWeekDaysCB[i].selected) {
						hiddenWeekDays.push(i);
					}
				}
				if (calendar != null) {
					calendar.hiddenWorkWeekDays = hiddenWeekDays;
				}
			}
			
			private function roundToDayCB_clickHandler(event:MouseEvent):void
			{
				CalendarGroupGridLayout(calendar.dataGroup.layout).roundToDay = roundToDayCB.selected;        
			}
			
			private function maxNumColumnsSlider_changeHandler(event:Event):void
			{
				calendar.maxNumColumns = maxNumColumnsSlider.value;        
			}
			
			protected function maxNumRowsSlider_changeHandler(event:Event):void
			{
				calendar.maxNumRows = maxNumRowsSlider.value;                
			}
			
			protected function dateIntervalStepSlider_changeHandler(event:Event):void
			{
				calendar.dateIntervalStep = dateIntervalStepSlider.value;
				
			}
			
			private function getLocaleChain(resourceManager:IResourceManager):String
			{
				return resourceManager.localeChain[0];
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- locale should be inherited from the application, but it does not --> 
		<s:DateTimeFormatter id="hourFormatter" dateStyle="none" timeStyle="short" locale="{getLocaleChain(resourceManager)}" />    
		
		<!--- @private -->    
		<fx:Component id="helpTip">         
			<s:DataRenderer minHeight="24" minWidth="40" maxWidth="300" mouseEnabled="false" 
							dataChange="dataChangeHandler(event)">  
				<fx:Script>
					<![CDATA[
						import flashx.textLayout.conversion.TextConverter;
						
						import mx.events.FlexEvent;
						
						protected function dataChangeHandler(event:FlexEvent):void
						{
							labelDisplay.textFlow = TextConverter.importToFlow(data, TextConverter.TEXT_FIELD_HTML_FORMAT);
						}
						
					]]>
				</fx:Script>
				<s:Rect id="background" top="0" bottom="0" right="0" left="0" radiusX="0" >   
					<s:fill>      
						<s:SolidColor color="0x333333" />
					</s:fill>
					<s:filters>
						<s:DropShadowFilter alpha="0.3" distance="5" />
					</s:filters>
				</s:Rect>
				
				<s:Rect width="100%" height="100%" top="1" bottom="1" right="1" left="1" radiusX="0" >
					<s:stroke>
						<!--- @private -->
						<s:LinearGradientStroke rotation="90" pixelHinting="true" weight="1">
							<s:GradientEntry color="0xf4e0e0" alpha="0.8" />
							<s:GradientEntry color="0xf4e0e0" alpha="0.4" />
							<s:GradientEntry color="0xF4E0E0" alpha="0" />
						</s:LinearGradientStroke>      
					</s:stroke>
				</s:Rect>
				
				<s:Rect width="100%" height="100%" top="0" bottom="0" right="0" left="0" radiusX="0" >
					<s:stroke>
						<s:SolidColorStroke color="0x000000" pixelHinting="true" />           
					</s:stroke>
				</s:Rect>  
				<!--- @private -->
				<s:RichText id="labelDisplay" 
							horizontalCenter="0" verticalCenter="1"
							left="5" right="5" top="5" bottom="5"
							textAlign="left" verticalAlign="middle"
							fontWeight="normal" color="white" fontSize="11" />        
			</s:DataRenderer>
		</fx:Component>  
		
	</fx:Declarations>
	
	<s:states>
		<s:State name="columns" />
		<s:State name="grid" />
	</s:states>    
	
	<s:Label text="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.firstDayOfWeek')" 
			 fontWeight="bold" fontSize="11" textAlign="right" />
	
	<!--- @private -->
	<s:DropDownList id="firstDayOfWeekList" selectedIndex="0"
					initialize="firstDayOfWeekList_initializeHandler(event)"
					change="firstDayOfWeekList_changeHandler(event)" />     
	
	<s:Spacer height="5" width="5" />
	
	<s:HGroup verticalAlign="middle">
		
		<s:Label text="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.displayMode')" 
				 fontWeight="bold" fontSize="11" textAlign="right" />                 
		<s:Group rollOver="showHelpTip(event, 'displayMode')" rollOut="hideHelpTip()" >
			<s:BitmapImage source="@Embed(source='../../../../../../../resources/help.png')" />  
		</s:Group>        
	</s:HGroup>
	
	<!--- @private -->
	<s:DropDownList id="displayModeDropDownList" selectedIndex="0" 
					change="displayModeDropDownList_changeHandler(event)" labelField="label">
		<s:ArrayList>
			<fx:Object label="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.displayMode.auto')" />
			<fx:Object label="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.displayMode.columns')" />
			<fx:Object label="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.displayMode.grid')" />
		</s:ArrayList>
	</s:DropDownList>
	
	<s:HGroup verticalAlign="middle">
		
		<s:Label text="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.dateIntervalStep')" 
				 fontWeight="bold" fontSize="11" textAlign="right" />                 
		<s:Group rollOver="showHelpTip(event, 'dateIntervalStepHelp')" rollOut="hideHelpTip()" >
			<s:BitmapImage source="@Embed(source='../../../../../../../resources/help.png')" />  
		</s:Group>        
	</s:HGroup>
	
	<s:HSlider id="dateIntervalStepSlider" width="100" value="1" minimum="1" maximum="7" snapInterval="1" 
			   change="dateIntervalStepSlider_changeHandler(event)" liveDragging="false" />  
	
	<s:Spacer height="5" width="5" />
	
	<!--- @private -->
	<s:VGroup id="columnsProperties" includeIn="columns">    
		
		<s:Label text="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.minTimeOfDay')" 
				 fontWeight="bold" fontSize="11" textAlign="right" />
		<!--- @private -->
		<s:DropDownList id="minTimeOfDayList" selectedIndex="8"                                             
						change="minTimeOfDayList_changeHandler(event)">
			<s:dataProvider>
				<s:ArrayList source="{timeOfDayModel}" />
			</s:dataProvider>
		</s:DropDownList>
		
		<s:Spacer height="5" width="5" />
		
		<s:Label text="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.maxTimeOfDay')" 
				 fontWeight="bold" fontSize="11" textAlign="right" />
		
		<!--- @private -->
		<s:DropDownList id="maxTimeOfDayList" selectedIndex="18"                                             
						change="maxTimeOfDayList_changeHandler(event)">
			<s:dataProvider>
				<s:ArrayList source="{timeOfDayModel}" />
			</s:dataProvider>
		</s:DropDownList>
		
		<s:Spacer height="5" width="5" />
		
		<s:HGroup verticalAlign="middle">
			
			<s:Label text="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.rendererKind')" 
					 fontWeight="bold" fontSize="11" textAlign="right" />
			
			<s:Group rollOver="showHelpTip(event, 'columnsRendererKindHelp')" rollOut="hideHelpTip()" >
				<s:BitmapImage source="@Embed(source='../../../../../../../resources/help.png')" />  
			</s:Group>
			
		</s:HGroup>
		
		<!--- @private -->
		<s:DropDownList id="columnRendererTypeList" 
						selectedIndex="0" 
						change="columnRendererTypeList_changeHandler(event)">
			<s:dataProvider>
				<s:ArrayList>
					<fx:Object label="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.rendererKind.default')" />
					<fx:Object label="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.rendererKind.vertical')" />
					<fx:Object label="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.rendererKind.bars')" />
					<fx:Object label="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.rendererKind.dynamic')" />
				</s:ArrayList>
			</s:dataProvider>
		</s:DropDownList> 
		
		<s:Spacer height="5" width="5" />
		
		<s:HGroup verticalAlign="middle">
			<s:Label text="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.maxNumColumns')" 
					 fontWeight="bold" fontSize="11" textAlign="right" />
			<s:Group rollOver="showHelpTip(event, 'maxNumColumnsHelp')" rollOut="hideHelpTip()" >
				<s:BitmapImage source="@Embed(source='../../../../../../../resources/help.png')" />  
			</s:Group>
		</s:HGroup>
		
		<s:HSlider id="maxNumColumnsSlider" width="100" value="15" minimum="1" maximum="31" snapInterval="1" 
				   change="maxNumColumnsSlider_changeHandler(event)" />    
		
		<s:Spacer height="5" width="5" />
		
		<s:HGroup verticalAlign="middle">
			<s:Label text="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.overlap')" 
					 fontWeight="bold" fontSize="11" textAlign="right" />
			<s:Group rollOver="showHelpTip(event, 'columnPercentOverlapHelp')" rollOut="hideHelpTip()" >
				<s:BitmapImage source="@Embed(source='../../../../../../../resources/help.png')" />  
			</s:Group>
		</s:HGroup>
		
		<!--- @private -->
		<s:HSlider id="columnPercentOverlapSlider" width="100" value="70" minimum="0" maximum="100" snapInterval="5" 
				   change="columnPercentOverlapSlider_changeHandler(event)" 
				   dataTipFormatFunction="{percentFormatFunction}"  />     
		
		<s:Spacer height="5" width="5" />
		
		<s:HGroup verticalAlign="middle">
			
			<s:Label text="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.horizontalGap')" 
					 fontWeight="bold" fontSize="11" textAlign="right" />
			
			<s:Group rollOver="showHelpTip(event, 'horizontalGapHelp')" rollOut="hideHelpTip()" >
				<s:BitmapImage source="@Embed(source='../../../../../../../resources/help.png')" />  
			</s:Group>
		</s:HGroup>
		
		<!--- @private -->
		<s:HSlider id="horizontalGapSlider" width="100" value="2" minimum="0" maximum="10" snapInterval="1" 
				   change="horizontalGapSlider_changeHandler(event)"
				   dataTipFormatFunction="{pixelsFormatFunction}" />      
		
		<s:Spacer height="5" width="5" />
		
		<s:HGroup verticalAlign="middle">
			<s:Label text="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.timeSlotDuration')" 
					 fontWeight="bold" fontSize="11" textAlign="right" />    
			<s:Group rollOver="showHelpTip(event, 'timeSlotDurationHelp')" rollOut="hideHelpTip()" >
				<s:BitmapImage source="@Embed(source='../../../../../../../resources/help.png')" />  
			</s:Group>
		</s:HGroup>         
		
		<!--- @private -->
		<s:HSlider id="timeSlotDuration" width="100" value="0" minimum="0" maximum="120" snapInterval="5" 
				   change="timeSlotDuration_changeHandler(event)" liveDragging="false"
				   dataTipFormatFunction="{timeSlotFormatFunction}" />
		
		
		<s:Spacer height="5" width="5" />
		
		<s:HGroup verticalAlign="middle">
			
			<!--- @private -->
			<s:CheckBox id="barStackingCheckBox" label="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.barStacking')" selected="true" change="barStackingCheckBox_changeHandler(event)" />
			<s:Group rollOver="showHelpTip(event, 'barStackingHelp')" rollOut="hideHelpTip()" >
				<s:BitmapImage source="@Embed(source='../../../../../../../resources/help.png')" />  
			</s:Group>
		</s:HGroup>
		<!--- @private -->
		<s:CheckBox id="itemIndicatorsCheckBox" label="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.showItemIndicators')" 
					selected="true" change="itemIndicatorsCheckBox_changeHandler(event)" />
		
	</s:VGroup>
	
	<!--- @private -->
	<s:VGroup id="gridProperties" includeIn="grid">  
		
		<s:HGroup verticalAlign="middle">
			
			<s:Label text="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.minTimeOfDay')" 
					 fontWeight="bold" fontSize="11" textAlign="right" />
			<s:Group rollOver="showHelpTip(event, 'gridMinMaxHelp')" rollOut="hideHelpTip()" >
				<s:BitmapImage source="@Embed(source='../../../../../../../resources/help.png')" />  
			</s:Group> 
		</s:HGroup>
		
		<!--- @private -->
		<s:DropDownList id="gridMinTimeOfDayList" selectedIndex="0"                             
						change="gridMinTimeOfDayList_changeHandler(event)">
			<s:dataProvider>
				<s:ArrayList source="{timeOfDayModel}" />
			</s:dataProvider>
		</s:DropDownList>
		
		<s:Spacer height="5" width="5" />
		
		<s:HGroup verticalAlign="middle">
			<s:Label text="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.maxTimeOfDay')" 
					 fontWeight="bold" fontSize="11" textAlign="right" />
			<s:Group rollOver="showHelpTip(event, 'gridMinMaxHelp')" rollOut="hideHelpTip()" >
				<s:BitmapImage source="@Embed(source='../../../../../../../resources/help.png')" />  
			</s:Group> 
		</s:HGroup>
		
		<!--- @private -->
		<s:DropDownList id="gridMaxTimeOfDayList" selectedIndex="24"                                             
						change="gridMaxTimeOfDayList_changeHandler(event)">
			<s:dataProvider>
				<s:ArrayList source="{timeOfDayModel}" />
			</s:dataProvider>
		</s:DropDownList>
		
		
		<s:Spacer height="5" width="5" />
		
		<s:HGroup verticalAlign="middle">
			<s:Label text="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.rendererKind')" 
					 fontWeight="bold" fontSize="11" textAlign="right" />
			<s:Group rollOver="showHelpTip(event, 'gridRendererKindHelp')" rollOut="hideHelpTip()" >
				<s:BitmapImage source="@Embed(source='../../../../../../../resources/help.png')" />  
			</s:Group>
		</s:HGroup>      
		
		<!--- @private -->
		<s:DropDownList id="gridRendererTypeList" 
						selectedIndex="0" 
						change="gridRendererTypeList_changeHandler(event)">
			<s:dataProvider>
				<s:ArrayList>
					<fx:Object label="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.rendererKind.default')" />
					<fx:Object label="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.rendererKind.horizontal')" />
					<fx:Object label="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.rendererKind.label')" />
				</s:ArrayList>
			</s:dataProvider>
		</s:DropDownList>      
		
		<s:Spacer height="5" width="5" />
		
		<s:HGroup verticalAlign="middle">
			<s:Label text="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.maxNumRows')" 
					 fontWeight="bold" fontSize="11" textAlign="right" />
			<s:Group rollOver="showHelpTip(event, 'maxNumRowsHelp')" rollOut="hideHelpTip()" >
				<s:BitmapImage source="@Embed(source='../../../../../../../resources/help.png')" />  
			</s:Group>
		</s:HGroup>
		
		<s:HSlider id="maxNumRowsSlider" width="100" value="12" minimum="1" maximum="20" snapInterval="1" 
				   change="maxNumRowsSlider_changeHandler(event)" />   
		
		<s:Spacer height="5" width="5" />
		
		<s:HGroup verticalAlign="middle">
			
			<s:Label text="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.overlap')" 
					 fontWeight="bold" fontSize="11" textAlign="right" />
			
			<s:Group rollOver="showHelpTip(event, 'gridPercentOverlapHelp')" rollOut="hideHelpTip()" >
				<s:BitmapImage source="@Embed(source='../../../../../../../resources/help.png')" />  
			</s:Group>
		</s:HGroup>   
		
		<!--- @private -->
		<s:HSlider id="gridPercentOverlapSlider" width="100" value="0" minimum="0" maximum="100" snapInterval="5" 
				   change="gridPercentOverlapSlider_changeHandler(event)" dataTipFormatFunction="{percentFormatFunction}"  />
		
		<s:Spacer height="5" width="5" />
		
		<s:HGroup verticalAlign="middle">
			
			<s:Label text="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.verticalGap')" 
					 fontWeight="bold" fontSize="11" textAlign="right" />
			<s:Group rollOver="showHelpTip(event, 'verticalGapHelp')" rollOut="hideHelpTip()" >
				<s:BitmapImage source="@Embed(source='../../../../../../../resources/help.png')"  />  
			</s:Group>
		</s:HGroup>    
		
		<!--- @private -->
		<s:HSlider id="verticalGapSlider" width="100" value="2" minimum="0" maximum="10" snapInterval="1" 
				   change="verticalGapSlider_changeHandler(event)" dataTipFormatFunction="{pixelsFormatFunction}" />
		
		<!--- @private -->
		<s:HGroup verticalAlign="middle">
			
			<s:CheckBox id="roundToDayCB" label="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.roundToDay')" click="roundToDayCB_clickHandler(event)" />
			<s:Group rollOver="showHelpTip(event, 'roundToDayHelp')" rollOut="hideHelpTip()" >
				<s:BitmapImage source="@Embed(source='../../../../../../../resources/help.png')" />  
			</s:Group>
		</s:HGroup>   
		
		
		
	</s:VGroup>
	
	<s:Spacer height="5" width="5" />
	
	<s:HGroup verticalAlign="middle">
		<s:Label text="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.hiddenWeekDays')" 
				 fontWeight="bold" fontSize="11" textAlign="right" />       
		
		<!--- @private -->    
		<s:Group rollOver="showHelpTip(event, 'hiddenWeekDaysHelp')" rollOut="hideHelpTip()" >
			<s:BitmapImage source="@Embed(source='../../../../../../../resources/help.png')" />  
		</s:Group>
		
	</s:HGroup>
	
	<s:VGroup id="hiddenWeekDaysGroup" initialize="hiddenWeekDaysGroup_initializeHandler(event)" />
	
	<s:HGroup verticalAlign="middle">
		<s:Label text="@Resource(bundle='calendarsample', key='calendarsample.advancedPropertiesPanel.workWeekHiddenWeekDays')" 
				 fontWeight="bold" fontSize="11" textAlign="right" />       
		
		<!--- @private -->    
		<s:Group rollOver="showHelpTip(event, 'workWeekHiddenWeekDaysHelp')" rollOut="hideHelpTip()" >
			<s:BitmapImage source="@Embed(source='../../../../../../../resources/help.png')" />  
		</s:Group>
		
	</s:HGroup>
	
	<s:VGroup id="workWeekHiddenWeekDaysGroup" initialize="workWeekHiddenWeekDaysGroup_initializeHandler(event)" />
	
</s:VGroup>
