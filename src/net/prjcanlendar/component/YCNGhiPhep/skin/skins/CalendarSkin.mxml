<?xml version="1.0" encoding="utf-8"?>

<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
        xmlns:s="library://ns.adobe.com/flex/spark"        
        xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:skins="net.prjcanlendar.component.YCNGhiPhep.skin.skins.*" 
		xmlns:fprj="http://f-project.net/xmlns/fprj/2013"
		initialize="skin_initializeHandler(event)"
		creationComplete="skin_creationCompleteHandler(event)" 
		xmlns:skins1="net.prjcanlendar.component.YCNGhiPhep.skin.skins.*">
  
  <!-- host component -->
  <fx:Metadata>
    [HostComponent("net.fproject.calendar.components.Calendar")]
  </fx:Metadata>
  
  <fx:Script>
    <![CDATA[
		import mx.events.FlexEvent;
		
		import spark.effects.easing.Power;
		import spark.events.IndexChangeEvent;
		
		import net.prjcanlendar.component.YCNGhiPhep.skin.components.DrillDownEvent;
		
		import net.fproject.calendar.components.CalendarDisplayMode;
		import net.fproject.calendar.components.DateInterval;
		import net.fproject.calendar.events.CalendarEvent;
		import net.fproject.calendar.supportClasses.CalendarRenderData;
		import net.fproject.core.TimeUnit;
		import net.fproject.utils.ResourceUtil;
      
        
      private function skin_initializeHandler(event:FlexEvent):void
      {      
        hostComponent.addEventListener(CalendarEvent.VISIBLE_TIME_RANGE_CHANGED, cal_visibleTimeRangeChangedHandler);        
      }      
      
      protected function skin_creationCompleteHandler(event:FlexEvent):void
      {
        secondaryDataGroup.addEventListener(DrillDownEvent.DRILL_DOWN, drillDownEventHandler);
      }
      
      /**
       * Handler called when the visible time range displayed by the calendar has changed.
       */  
      protected function cal_visibleTimeRangeChangedHandler(event:CalendarEvent):void
      {

        var e:Date = hostComponent.calendar.dateAddByTimeUnit(hostComponent.renderData.endDisplayedDate, TimeUnit.DAY, 1);
        rangeLabel.text = hostComponent.getTimeRangeLabel(null, hostComponent.renderData.startDisplayedDate, e);
        
        // Update the date interval button bar
        var dateInterval:String = hostComponent.renderData.dateInterval;
        if (dateInterval == DateInterval.DAY) {
          dateIntervalButtonBar.selectedIndex = 0;
        } else if (dateInterval == DateInterval.WORK_WEEK) {
          dateIntervalButtonBar.selectedIndex = 1;
        } else if (dateInterval == DateInterval.WEEK) {
          dateIntervalButtonBar.selectedIndex = 2;
        } else if (dateInterval == DateInterval.MONTH) {
          dateIntervalButtonBar.selectedIndex = 3;
        }
      }
      
      /**
       * Show the current day.
       */  
      private function moveToCurrentDay():void {        
        hostComponent.referenceDate = new Date();
        hostComponent.dateInterval = DateInterval.DAY;                                   
      }
      
      /**
       * Update the displayed time interval of the calendar according to the 
       * date interval selected.
       */  
      protected function dateIntervalButtonBar_changeHandler(event:IndexChangeEvent):void
      {        
        if (hostComponent.referenceDate == null) {          
          hostComponent.referenceDate = hostComponent.endDate;              
        }
        if (event.newIndex != -1) {
          hostComponent.dateInterval = dateIntervalButtonBar.dataProvider.getItemAt(event.newIndex).value.toString();
        }
      }
      
      private function rowLabelFunction(rd:CalendarRenderData):String {
        
        if (rd.displayMode == CalendarDisplayMode.GRID) {
          var weekNumber:int = hostComponent.calendar.getWeek(rd.startDate);
          var s:String = weekNumber.toString();
          if (weekNumber < 10) {
            s = "0" + s;
          }
          return resourceManager.getString(ResourceUtil.FPRJ_CALENDAR_BUNDLE, "rowHeader.week.label", [s]);
        } else {
          return null;
        }
         
      }

      protected function secondaryDataGroup_updateCompleteHandler(event:FlexEvent):void
      {                                  
       /* collapseSecondary.visible = secondaryDataGroup.height != 60 || 
          secondaryDataGroup.height == secondaryDataGroup.measuredHeight;*/                      
      }
      
      private function drillDownEventHandler(event:Event):void {
        secondaryDataGroup.height = secondaryDataGroup.measuredHeight;
      }

    ]]>
  </fx:Script>
		<fx:Style>
		@namespace fprj "http://f-project.net/xmlns/fprj/2013";
		
		/*fprj|CalendarSubColumnHeader{
			skinClass: ClassReference("net.prjcanlendar.component.YCNGhiPhep.skin.skins.SubColumnHeaderSkin")
		}
				
		fprj|CalendarColumnHeader {
			skin-class: ClassReference("net.prjcanlendar.component.YCNGhiPhep.skin.skins.ColumnHeaderSkin");
		}
		
		fprj|CalendarRowHeader {
			skin-class: ClassReference("net.prjcanlendar.component.YCNGhiPhep.skin.skins.RowHeaderSkin");
		}*/
		
		
	</fx:Style>
  
  <s:states>
    <s:State name="columns" />
    <s:State name="grid" />
  </s:states>
  
  <fx:Declarations>    
       
    <!--- @private -->
    <fx:Component id="itemVerticalBarRenderer">
      <!-- add enabled="false" to make the renderer not selectable and highlight-able -->
      <fprj:DefaultItemVerticalBarRenderer  />                                   
    </fx:Component>
    
    <!--- @private -->
    <fx:Component id="drillDownRenderer">
      <!-- right="0" bottom="0" to layout the renderer in the cell -->
      <fprj:DefaultDrillDownRenderer right="0" bottom="0"  />                                   
    </fx:Component>    
    
    <!--- @private -->    
    <fx:Component id="dataTip"> 
		<skins1:DataTip />
    </fx:Component>
    
    <!--- @private -->    
    <fx:Component id="editingTip">         
		<skins1:DataTip />
    </fx:Component>  
    
    <!--- @private -->    
    <fx:Component id="timeRangeTip">         
      <skins1:TimeRangeDataTip/>
    </fx:Component>
    
    <s:Fade id="showFx" alphaFrom="0" alphaTo="1" duration="200" easer="{new Power}" />
    
    <fx:Boolean id="secondaryExpanded" />
    
  </fx:Declarations>
  
  <s:layout>
    <s:VerticalLayout gap="0" />
  </s:layout>
  
  <s:HGroup width="100%" gap="0">
    
    <!-- Padding or zoom buttons -->    
   <!-- <s:Group width="{rowHeader.width}" height="100%" >     
      <s:Button id="zoomInButton" left="0" right="4" includeIn="columns"                
                icon="@Embed(source='../../../../../../../resources/zoom.png')" click="hostComponent.zoom(1.3, false)" />
      <s:Button id="zoomOutButton" left="0" right="4" top="{zoomInButton.height + 7}"  includeIn="columns" 
                icon="@Embed(source='../../../../../../../resources/unzoom.png')" click="hostComponent.zoom(1/1.3, false)" />
    </s:Group>-->
    
    <s:VGroup width="100%" gap="0" paddingLeft="54">
      
      <!-- Buttons and Button bar -->
      <s:HGroup id="buttonsGroup" width="100%" paddingBottom="6">
        
        <!-- The navigation buttons  -->
        <s:HGroup verticalAlign="middle" width="100%">
          <!--- @private -->
          <s:Button id="prevButton" height="21" width="26" icon="@Embed(source='../../../../../../../resources/leftArrow.png')" click="hostComponent.previousRange()" />
          <!--- @private -->
          <s:Button id="nextButton" height="21" width="26" icon="@Embed(source='../../../../../../../resources/rightArrow.png')" click="hostComponent.nextRange()"  />
          <s:Button label="@Resource(bundle='calendarsample', key='calendarsample.button.Today')" chromeColor="#FFF0B3" click="moveToCurrentDay()" />
          
          <!-- Currently displayed time interval -->
          <s:Label id="rangeLabel" fontWeight="bold" 
                   textAlign="left"
                   verticalAlign="middle"
                   maxDisplayedLines="1"
                   paddingTop="3" 
                   height="100%" width="100%" />
          
        </s:HGroup>
                             
        <!-- The date interval button bar -->
                          
        <s:ButtonBar id="dateIntervalButtonBar" selectedIndex="1" change="dateIntervalButtonBar_changeHandler(event)" maxWidth="300">                               
          <s:dataProvider>
            <s:ArrayList>
              <fx:Object label="@Resource(bundle='calendarsample', key='calendarsample.button.Day')" value="day" />
              <fx:Object label="@Resource(bundle='calendarsample', key='calendarsample.button.WorkWeek')" value="workweek" />
              <fx:Object label="@Resource(bundle='calendarsample', key='calendarsample.button.Week')" value="week" />
              <fx:Object label="@Resource(bundle='calendarsample', key='calendarsample.button.Month')" value="month" />
            </s:ArrayList>
          </s:dataProvider>
        </s:ButtonBar>          
          
        
      </s:HGroup>
      
      <!--- @private -->
      <fprj:CalendarColumnHeader id="columnHeader" width="100%" />
      
      <!-- secondary grid & group, visible in columns mode only -->
      <s:Group width="100%" includeIn="columns">
        <!--- @private -->
        <!-- height is computed by the data group -->
        <fprj:CalendarGrid id="secondaryGrid" visible="false" includeInLayout="false"
                          clipAndEnableScrolling="true"
                          width="100%" height="{secondaryDataGroup.height}"                                                                        
                          cellRenderer="net.prjcanlendar.component.YCNGhiPhep.skin.skins.SecondaryGridCellRenderer">      
          <fprj:layout>
            <fprj:CalendarGridLayout />
          </fprj:layout>
        </fprj:CalendarGrid>               
        
        <!--<s:Line top="0" left="0" right="0" displayObjectSharingMode="usesSharedObject">
          <s:stroke>
            <s:SolidColorStroke color="0xc0c0c0" />
          </s:stroke>
        </s:Line>
        
        <s:Line right="0" top="0" bottom="-1" displayObjectSharingMode="usesSharedObject">
          <s:stroke>
            <s:SolidColorStroke color="0x696969"  />
          </s:stroke>
        </s:Line>
        
        <s:Line left="0" top="0" bottom="-1" displayObjectSharingMode="usesSharedObject">
          <s:stroke>
            <s:SolidColorStroke color="0x696969" />
          </s:stroke>
        </s:Line>-->
               
        <!--- @private -->
        <fprj:CalendarDataGroup id="secondaryDataGroup" visible="false" includeInLayout="false" 
                               width="100%" bottom="4" height="60"
                               clipAndEnableScrolling="true" updateComplete="secondaryDataGroup_updateCompleteHandler(event)"
                               drillDownRenderer="net.prjcanlendar.component.YCNGhiPhep.skin.skins.DrillDownRenderer"
                               itemHorizontalRenderer="net.fproject.calendar.skins.DefaultItemHorizontalRenderer">            
          <fprj:layout>
            <fprj:CalendarSecondaryGroupLayout paddingBottom="8" />
          </fprj:layout>        
        </fprj:CalendarDataGroup>
       <!--         
        <s:Button id="collapseSecondary" bottom="5" right="2" visible="false" visible="false" includeInLayout="false"
                  icon="@Embed(source='../../../../../../../resources/unzoom.png')" width="34"
                  click="{secondaryDataGroup.height=60; collapseSecondary.visible=false}" showEffect="{showFx}" />-->
        
        <!--<s:Line left="1" right="1" bottom="3" >
          <s:stroke>
            <s:SolidColorStroke color="0xc0c0c0" />
          </s:stroke>
        </s:Line> --> 
      </s:Group>
      
      <!--- @private -->
      <fprj:CalendarSubColumnHeader id="subColumnHeader" 
                                   width="100%"
                                   includeIn="columns" />      
    </s:VGroup>
                                                                   
    <!-- Padding -->
    <s:Group width="{scroller.verticalScrollBar.width}" 
             includeInLayout="{scroller.verticalScrollBar.includeInLayout}" />
  </s:HGroup>
  
  <s:Group width="100%" height="100%" minWidth="840">
    <!--- @private -->
    <s:Scroller id="scroller" width="100%" height="100%" 
                verticalScrollPolicy.columns="on"
                verticalScrollPolicy.grid="off">
      
      <s:HGroup width="100%" height="100%" gap="0">     
        <!--- @private -->
        <fprj:CalendarRowHeader id="rowHeader" labelFunction="{rowLabelFunction}"/>
        
        <s:Group width="100%">
          <!--- @private -->
          <fprj:CalendarGrid id="grid"
                            width="100%" 
                            columnRenderer="net.prjcanlendar.component.YCNGhiPhep.skin.skins.GridColumnRenderer"
                            cellRenderer="net.prjcanlendar.component.YCNGhiPhep.skin.skins.GridCellRenderer"
                            clipAndEnableScrolling="true"
                            doubleClickEnabled="true"
                            mouseChildren="false">
            <fprj:layout>
              <fprj:CalendarGridLayout />
            </fprj:layout>
          </fprj:CalendarGrid>
          
          <s:Rect top="0" left="0" right="0" displayObjectSharingMode="usesSharedObject"
                  visible="{scroller.verticalScrollBar.includeInLayout}"
                  includeInLayout="{scroller.verticalScrollBar.includeInLayout}">
            <s:stroke>
              <s:SolidColorStroke color="0x696969" />
            </s:stroke>
          </s:Rect>          
          
          <s:Line left="0" top="0" bottom="0" displayObjectSharingMode="usesSharedObject">
            <s:stroke>
              <s:SolidColorStroke color="0x696969" />
            </s:stroke>
          </s:Line>
          <s:Line bottom="0" left="0" right="0" displayObjectSharingMode="usesSharedObject">
            <s:stroke>
              <s:SolidColorStroke color="0x696969" />
            </s:stroke>
          </s:Line>
          <s:Line right="0" top="0" bottom="0" displayObjectSharingMode="usesSharedObject">
            <s:stroke>
              <s:SolidColorStroke color="0x696969" />
            </s:stroke>
          </s:Line>          
          
          <!--- @private -->
          <fprj:CalendarDataGroup id="dataGroup"
                                 width="100%" height="100%"
                                 clipAndEnableScrolling="true" 
                                 itemVerticalRenderer="net.fproject.calendar.skins.DefaultItemVerticalRenderer"
                                 itemVerticalBarRenderer="{itemVerticalBarRenderer}"
                                 itemHorizontalRenderer="net.fproject.calendar.skins.DefaultItemHorizontalRenderer"
                                 itemLabelRenderer="net.fproject.calendar.skins.DefaultItemLabelRenderer"
                                 drillDownRenderer="{drillDownRenderer}" showEffect="{showFx}">            
            <fprj:layout.columns>
              <fprj:CalendarGroupColumnsLayout paddingRight="10" />
            </fprj:layout.columns>
            
            <fprj:layout.grid>
              <fprj:CalendarGroupGridLayout percentOverlap="0" verticalGap="3" paddingLeft="4" paddingBottom="10" />
            </fprj:layout.grid>
            
          </fprj:CalendarDataGroup>          
          
          <!-- Group that contains the current time decorations -->
          <s:Group width="100%" height="100%" clipAndEnableScrolling="true" mouseChildren="false" mouseEnabled="false">
            
            <s:layout>
              <fprj:CalendarDecorationLayout renderData="{hostComponent.renderData}"  />
            </s:layout>
            
            <!-- The current time decoration in columns display mode -->
            <fprj:CalendarCurrentTimeDecoration width="100%" includeIn="columns" >
              <fprj:stroke>
                <s:SolidColorStroke color="0xff0000" weight="2" />
              </fprj:stroke>
            </fprj:CalendarCurrentTimeDecoration>
            
            <!-- The current time decoration in grid display mode -->
            <fprj:CalendarCurrentTimeDecoration height="100%" includeIn="grid" >
              <fprj:stroke>
                <s:SolidColorStroke color="0xff0000" weight="2" />
              </fprj:stroke>
            </fprj:CalendarCurrentTimeDecoration>
            
          </s:Group>
                              
        </s:Group>
                                                                                                                        
      </s:HGroup>
      
    </s:Scroller>
    
    <!-- drop shadow when view is zoomed and scrolled -->
    <s:Rect left="{rowHeader.width}" right="{scroller.verticalScrollBar.width}" 
             height="3" top="0" visible="{scroller.verticalScrollBar.value>5}"
             displayObjectSharingMode="usesSharedObject">
      <s:fill>
        <s:LinearGradient rotation="90">
          <s:GradientEntry color="0x000000" alpha="0.5" />
          <s:GradientEntry color="0x000000" alpha="0" />
        </s:LinearGradient>
      </s:fill>
    </s:Rect>
    
    <!-- Border of the scroller when the view is zoomed -->
    <s:Line left="{rowHeader.width}" right="{scroller.verticalScrollBar.includeInLayout?scroller.verticalScrollBar.width:0}"  
            displayObjectSharingMode="usesSharedObject"
            >
      <s:stroke>
        <s:SolidColorStroke color="0x696969" />
      </s:stroke>
    </s:Line>
    
    <s:Line left="0" width="{rowHeader.width}" displayObjectSharingMode="usesSharedObject"
            visible="{scroller.verticalScrollBar.includeInLayout}"
            includeInLayout="{scroller.verticalScrollBar.includeInLayout}">
      <s:stroke>
        <s:SolidColorStroke color="0x696969" />
      </s:stroke>
    </s:Line>
    
    <s:Line bottom="0" left="0" right="0"  displayObjectSharingMode="usesSharedObject"
            visible="{scroller.verticalScrollBar.includeInLayout}"
            includeInLayout="{scroller.verticalScrollBar.includeInLayout}">
      <s:stroke>
        <s:SolidColorStroke color="0x696969" />
      </s:stroke>
    </s:Line>
            
    <!-- ScrollBar -->
    <s:Line height="100%" right="0"  displayObjectSharingMode="usesSharedObject"
            visible="{scroller.verticalScrollBar.includeInLayout}"
            includeInLayout="{scroller.verticalScrollBar.includeInLayout}">
      <s:stroke>
        <s:SolidColorStroke color="0x000000" />
      </s:stroke>
    </s:Line>
    
    <s:Line right="0" displayObjectSharingMode="usesSharedObject"
            width="{scroller.verticalScrollBar.width-1}" 
            visible="{scroller.verticalScrollBar.includeInLayout}"
            includeInLayout="{scroller.verticalScrollBar.includeInLayout}">
      <s:stroke>
        <s:SolidColorStroke color="0x000000" />
      </s:stroke>
    </s:Line>
    
    <s:Line right="0" bottom="0" displayObjectSharingMode="usesSharedObject" 
            width="{scroller.verticalScrollBar.width-1}"
            visible="{scroller.verticalScrollBar.includeInLayout}"
            includeInLayout="{scroller.verticalScrollBar.includeInLayout}">
      <s:stroke>
        <s:SolidColorStroke color="0x000000" />
      </s:stroke>
    </s:Line>
    <!-- End of border -->
    
  </s:Group>
          
</s:Skin>
