<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////////
//
// Licensed Source Code - Property of ProjectKit
//
// Copyright Â© 2013 ProjectKit. All Rights Reserved.
//
///////////////////////////////////////////////////////////////////////////////
-->
<fprj:CalendarRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark"                    
					   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
					   minHeight="20" depth="0" depth.selected="1"
					   xmlns:fprj="http://f-project.net/xmlns/fprj/2013"
					   styleName="calendarRenderer">
	
	<fx:Script fb:purpose="styling">
		<![CDATA[
			import mx.utils.ColorUtil;
			
			import net.fproject.calendar.components.supportClasses.CalendarRenderItem;
			import net.fproject.calendar.components.supportClasses.CalendarUtil;
			
			/**
			 * @private
			 * 
			 * Hides the start time label if the range displayed starts at the first hour of a day.
			 */
			override protected function getStartTimeLabel(item:CalendarRenderItem):String {
				return CalendarUtil.isStartOfDay(range[0]) ? null : super.getStartTimeLabel(item);
			}
			
			/**
			 * @private
			 * 
			 * Hides the end time label if the range displayed ends at the first hour of a day.
			 */
			override protected function getEndTimeLabel(item:CalendarRenderItem):String {
				return CalendarUtil.isStartOfDay(range[1]) ? null : super.getEndTimeLabel(item);
			}
			
			/**
			 * @private
			 */  
			override protected function applyContentBackgroundColorAndAlpha():void
			{
				var colorFunction:Function = this.renderData.itemColorFunction;
				if(colorFunction != null)
				{
					var o:Object = colorFunction(data, false, false);
					var b:Boolean = o["isPastEvent"];
					if(b)
					{
						var c:uint = o["color"];
						if(this.hovered || this.selected)
							c = ColorUtil.adjustBrightness2(c, -10);
						backgroundFill.entries[0].color = backgroundFill.entries[1].color = c;
						shadowStroke.color = ColorUtil.adjustBrightness2(c, -20);
						borderStroke.color = ColorUtil.adjustBrightness2(c, -50);
					}
					else if(!this.selected && !this.hovered)
					{
						backgroundFill.entries[0].color = 0xFCFBDB;
						backgroundFill.entries[1].color = 0xF4EF89;
						shadowStroke.color = 0xD0C36B;
						borderStroke.color = 0xEFDD75;
					}
					borderStroke.alpha = !b && this.selected ? 0.4 : 1;
				}
			}			
		]]>
	</fx:Script>
	
	<fprj:states>
		<s:State name="normal"/>
		<s:State name="hovered" stateGroups="over,highlight"/>
		<s:State name="selected" stateGroups="select,highlight"/>
		<s:State name="selectedAndHovered" basedOn="selected" stateGroups="over,select,highlight"/>
		<s:State name="edited" basedOn="selected" stateGroups="select,highlight"/>
	</fprj:states>  
	
	<fprj:transitions>
		<s:Transition fromState="*" toState="*" >
			<s:Parallel duration="100" target="{fillEntry1}">
				<s:AnimateColor  />
				<s:Fade />  
			</s:Parallel>      
		</s:Transition>                  
	</fprj:transitions>
	
	<s:Rect left="3" top="3" right="0" bottom="0">
		<s:stroke>
			<s:SolidColorStroke id="shadowStroke" weight="3" color="#D0C36B" color.over="#CCCCCC"/>
		</s:stroke>
	</s:Rect>
	<s:Rect id="background"
			left="0" right="2" bottom="2" top="0">
		<s:fill>
			<s:LinearGradient id="backgroundFill"
							  x="2.83386" y="8.66461" scaleX="151.901" rotation="40.445">
				<s:GradientEntry id="fillEntry1" ratio="0" color="#FCFBDB" color.highlight="#FEFDB7"/>
				<s:GradientEntry id="fillEntry2" ratio="1" color="#F4EF89" color.highlight="#F5F06C"/>
			</s:LinearGradient>
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke id="borderStroke"
								caps="none" joints="miter" miterLimit="4" 
								color="#EFDD75" color.hovered="#FFFF00" color.select="#FF"
								weight="1" weight.highlight="2"/>
		</s:stroke>
		
	</s:Rect>
	
	<s:HGroup width="100%" left="3" right="3" top="3" bottom="3" verticalAlign="middle" clipAndEnableScrolling="true">
		
		<!--- @copy net.fproject.calendar.supportClasses.CalendarRenderer#beforeIcon -->
		<s:Path id="beforeIcon" 
				data="M 0 3 L 5 0 L 5 5 Z">
			<s:fill>
				<s:SolidColor id="beforeIconFill" color="0x000000" />
			</s:fill>
		</s:Path>
		
		<!--- @copy net.fproject.calendar.supportClasses.CalendarRenderer#occurrenceIcon --> 
		<s:Path id="occurrenceIcon" includeInLayout="false"
				data="M 1 6 Q 10 -2 13 8 Q 10 -4 1 6  
				M 14 8 Q 6 18 1 8 Q 6 20 14 8
				M 0 9 L 4 9 L 2 5 L 0 9
				M 10 6 L 14 6 L 12 10 L 10 6" >
			<s:fill>
				<!--- @private -->
				<s:SolidColor id="occurrenceIconFill" color="0x000000" />
			</s:fill>
		</s:Path>
		
		<!--- @copy net.fproject.calendar.supportClasses.CalendarRenderer#exceptionIcon -->
		<s:Path id="exceptionIcon"               
				data="M 1 6 Q 10 -2 13 8 Q 10 -4 1 6  
				M 14 8 Q 6 18 1 8 Q 6 20 14 8
				M 0 9 L 4 9 L 2 5 L 0 9
				M 10 6 L 14 6 L 12 10 L 10 6
				M 0 0 L 15 15 L 13 15 L 0 0
				M 15 0 L 0 15 L 2 15 L 15 0" >
			<s:fill>
				<!--- @private -->
				<s:SolidColor id="exceptionIconFill" color="0x00000" />
			</s:fill>
		</s:Path>
		
		<!--- @copy net.fproject.calendar.skins.spark.supportC lasses.CalendarRenderer#startTimeLabelDisplay -->
		<s:Label id="startTimeLabelDisplay" maxDisplayedLines="1" fontWeight="bold" />
		
		<!--- @copy net.fproject.calendar.skins.spark.supportClasses.CalendarRenderer#labelDisplay -->
		<s:Label id="labelDisplay" width="100%" maxDisplayedLines="1" />
		
		<!--- @copy net.fproject.calendar.skins.spark.supportC lasses.CalendarRenderer#startTimeLabelDisplay -->
		<s:Label id="endTimeLabelDisplay" maxDisplayedLines="1" fontWeight="bold" includeIn="edited" />
		
		<!--- @copy net.fproject.calendar.supportClasses.CalendarRenderer#afterIcon -->
		<s:Path id="afterIcon" 
				data="M 0 0 L 5 3 L 0 5 Z">
			<s:fill>
				<s:SolidColor id="afterIconFill" color="0x000000" />
			</s:fill>
		</s:Path>
		
	</s:HGroup>     
	
</fprj:CalendarRenderer>
